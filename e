          length: 0,
            push: [Function: push],
            unshift: [Function: unshift],
            shift: [Function: shift],
            clear: [Function: clear],
            first: [Function: first],
            concat: [Function: concat],
            join: [Function: join],
            consume: [Function: consume]
          },
          pipes: [],
          errored: null,
          defaultEncoding: "utf8",
          awaitDrainWriters: null,
          decoder: null,
          encoding: null
        },
        _writableState: {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: "utf8",
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: [],
          getBuffer: [Function: getBuffer],
          bufferedRequestCount: [Getter]
        },
        allowHalfOpen: true,
        [Symbol(::bunternal::)]: undefined,
        bytesRead: 0,
        bytesWritten: 0,
        connecting: false,
        remoteAddress: "localhost",
        remotePort: "3000",
        timeout: 0,
        isServer: false,
        address: [Function: address],
        bufferSize: [Getter],
        connect: [Function: connect],
        _destroy: [Function: _destroy],
        _final: [Function: _final],
        localAddress: [Getter],
        localFamily: [Getter],
        localPort: [Getter],
        pending: [Getter],
        _read: [Function: _read],
        readyState: [Getter],
        ref: [Function: ref],
        remoteFamily: [Getter],
        resetAndDestroy: [Function: resetAndDestroy],
        setKeepAlive: [Function: setKeepAlive],
        setNoDelay: [Function: setNoDelay],
        setTimeout: [Function: setTimeout],
        unref: [Function: unref],
        _write: [Function: _write],
        write: [Function],
        cork: [Function],
        uncork: [Function],
        setDefaultEncoding: [Function: setDefaultEncoding],
        _writev: null,
        end: [Function],
        writable: [Getter],
        writableHighWaterMark: [Getter],
        writableObjectMode: [Getter],
        writableBuffer: [Getter],
        writableLength: [Getter],
        writableFinished: [Getter],
        writableCorked: [Getter],
        writableEnded: [Getter],
        writableNeedDrain: [Getter],
        destroyed: [Getter],
        on: [Function],
        destroy: [Function: destroy2],
        _undestroy: [Function: undestroy],
        undefined: [Function],
        push: [Function],
        unshift: [Function],
        isPaused: [Function],
        setEncoding: [Function],
        read: [Function],
        pipe: [Function],
        unpipe: [Function],
        addListener: [Function],
        removeListener: [Function],
        off: [Function],
        removeAllListeners: [Function],
        resume: [Function],
        pause: [Function],
        wrap: [Function],
        iterator: [Function],
        readable: [Getter],
        readableDidRead: [Getter],
        readableAborted: [Getter],
        readableHighWaterMark: [Getter],
        readableBuffer: [Getter],
        readableFlowing: [Getter],
        readableLength: [Getter],
        readableObjectMode: [Getter],
        readableEncoding: [Getter],
        errored: [Getter],
        closed: [Getter],
        readableEnded: [Getter],
        asIndexedPairs: [Function],
        drop: [Function],
        filter: [Function],
        flatMap: [Function],
        map: [Function],
        take: [Function],
        every: [Function],
        forEach: [Function],
        reduce: [Function],
        toArray: [Function],
        some: [Function],
        find: [Function],
        [Symbol(Symbol.asyncIterator)]: [Function]
      },
      [Symbol(#noBody)]: false,
      [Symbol(#aborted)]: false,
      [Symbol(#req)]: Response (0 KB) {
        ok: false,
        url: "http://localhost:3000/extract-cleaner-data-timecard",
        headers: Headers {
          "access-control-allow-origin": "*",
          "content-type": "application/json; charset=utf-8",
          "content-length": "283",
          "etag": "W/\"11b-uKgiqjIVxoRivOiHEWppf/PxPrU\"",
          "date": "Mon, 08 Jan 2024 13:54:12 GMT",
          "connection": "keep-alive",
          "keep-alive": "timeout=5",
          "x-powered-by": "Express"
        },
        statusText: "Internal Server Error",
        redirected: true,
        bodyUsed: false,
        status: 500,
        ReadableStream {
          [Symbol(state)]: 1,
          [Symbol(reader)]: ReadableStreamDefaultReader {
            [Symbol(ownerReadableStream)]: [Circular],
            [Symbol(closedPromiseCapability)]: {
              resolve: [Function: resolve],
              reject: [Function: reject],
              promise: Promise { <resolved> }
            },
            [Symbol(readRequests)]: {
              [Symbol(PolyProto)]: {
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              _head: 0,
              _tail: 0,
              _capacityMask: 3,
              _list: [ undefined, undefined, undefined, undefined ],
              size: [Function: size],
              isEmpty: [Function: isEmpty],
              isNotEmpty: [Function: isNotEmpty],
              shift: [Function: shift],
              peek: [Function: peek],
              push: [Function: push],
              toArray: [Function: toArray],
              clear: [Function: clear],
              _growArray: [Function: _growArray],
              _shrinkArray: [Function: _shrinkArray]
            },
            closed: [Getter],
            read: [Function: read],
            readMany: [Function: readMany],
            cancel: [Function: cancel],
            releaseLock: [Function: releaseLock]
          },
          [Symbol(storedError)]: undefined,
          [Symbol(disturbed)]: true,
          [Symbol(readableStreamController)]: ReadableByteStreamController {
            [Symbol(controlledReadableStream)]: [Circular],
            [Symbol(underlyingByteSource)]: {
              [Symbol(#cancellationToken)]: {},
              pull: [Function: #pull],
              cancel: [Function: #cancel],
              start: [Function],
              [Symbol(#tag)]: 2705664617568,
              type: "bytes",
              autoAllocateChunkSize: 283
            },
            [Symbol(pullAgain)]: false,
            [Symbol(pulling)]: false,
            [Symbol(pendingPullIntos)]: {
              [Symbol(PolyProto)]: {
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              _head: 0,
              _tail: 1,
              _capacityMask: 3,
              _list: [
                {
                  buffer: ArrayBuffer(283) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                  byteOffset: 0,
                  byteLength: 283,
                  bytesFilled: 0,
                  elementSize: 1,
                  ctor: [class Uint8Array],
                  readerType: "default"
                }, undefined, undefined, undefined
              ],
              size: [Function: size],
              isEmpty: [Function: isEmpty],
              isNotEmpty: [Function: isNotEmpty],
              shift: [Function: shift],
              peek: [Function: peek],
              push: [Function: push],
              toArray: [Function: toArray],
              clear: [Function: clear],
              _growArray: [Function: _growArray],
              _shrinkArray: [Function: _shrinkArray]
            },
            [Symbol(queue)]: {
              content: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 0,
                _capacityMask: 3,
                _list: [ undefined, undefined, undefined, undefined ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              size: 0
            },
            [Symbol(started)]: 1,
            [Symbol(closeRequested)]: false,
            [Symbol(strategyHWM)]: 0,
            [Symbol(autoAllocateChunkSize)]: 283,
            [Symbol(cancel)]: [Function: readableByteStreamControllerCancel],
            [Symbol(pull)]: [Function: readableByteStreamControllerPull],
            [Symbol(byobRequest)]: ReadableStreamBYOBRequest {
              [Symbol(associatedReadableByteStreamController)]: [Circular],
              [Symbol(view)]: Uint8Array(283) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
              view: [Getter],
              respond: [Function: respond],
              respondWithNewView: [Function: respondWithNewView]
            },
            byobRequest: [Getter],
            desiredSize: [Getter],
            enqueue: [Function: enqueue],
            close: [Function: close],
            error: [Function: error]
          },
          [Symbol(bunNativeType)]: 1,
          [Symbol(asyncContext)]: undefined,
          [Symbol(highWaterMark)]: undefined,
          [Symbol(underlyingSource)]: undefined,
          [Symbol(start)]: undefined,
          locked: [Getter],
          cancel: [Function: cancel],
          getReader: [Function: getReader],
          pipeTo: [Function: pipeTo],
          pipeThrough: [Function: pipeThrough],
          tee: [Function: tee],
          values: [Function: values],
          [Symbol(Symbol.asyncIterator)]: [Function: lazyAsyncIterator]
        }
      },
      url: "/extract-cleaner-data-timecard",
      [Symbol(#type)]: "response",
      [Symbol(#nodeReq)]: [Circular],
      req: [Circular],
      responseUrl: "http://localhost:3000/extract-cleaner-data-timecard",
      redirects: [],
      _construct: [Function: _construct],
      _read: [Function: _read],
      aborted: [Getter],
      connection: [Getter],
      statusCode: [Getter],
      statusMessage: [Getter],
      httpVersion: [Getter],
      rawTrailers: [Getter],
      httpVersionMajor: [Getter],
      httpVersionMinor: [Getter],
      trailers: [Getter],
      socket: [Getter],
      setTimeout: [Function: setTimeout],
      on: [Function],
      destroy: [Function: destroy2],
      _undestroy: [Function: undestroy],
      _destroy: [Function],
      undefined: [Function],
      push: [Function],
      unshift: [Function],
      isPaused: [Function],
      setEncoding: [Function],
      read: [Function],
      pipe: [Function],
      unpipe: [Function],
      addListener: [Function],
      removeListener: [Function],
      off: [Function],
      removeAllListeners: [Function],
      resume: [Function],
      pause: [Function],
      wrap: [Function],
      iterator: [Function],
      readable: [Getter],
      readableDidRead: [Getter],
      readableAborted: [Getter],
      readableHighWaterMark: [Getter],
      readableBuffer: [Getter],
      readableFlowing: [Getter],
      readableLength: [Getter],
      readableObjectMode: [Getter],
      readableEncoding: [Getter],
      errored: [Getter],
      closed: [Getter],
      destroyed: [Getter],
      readableEnded: [Getter],
      asIndexedPairs: [Function],
      drop: [Function],
      filter: [Function],
      flatMap: [Function],
      map: [Function],
      take: [Function],
      every: [Function],
      forEach: [Function],
      reduce: [Function],
      toArray: [Function],
      some: [Function],
      find: [Function],
      [Symbol(Symbol.asyncIterator)]: [Function],
      once: [Function: once],
      prependListener: [Function: prependListener],
      prependOnceListener: [Function: prependOnceListener],
      emit: [Function: emit],
      eventNames: [Function: eventNames],
      listenerCount: [Function: listenerCount],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners]
    },
    [Symbol(#upgradeOrConnect)]: false,
    [Symbol(#parser)]: null,
    [Symbol(#maxHeadersCount)]: null,
    [Symbol(#reusedSocket)]: false,
    [Symbol(#host)]: "localhost",
    [Symbol(#protocol)]: "http:",
    [Symbol(#method)]: "POST",
    [Symbol(#port)]: "3000",
    [Symbol(#useDefaultPort)]: false,
    [Symbol(#joinDuplicateHeaders)]: undefined,
    [Symbol(#maxHeaderSize)]: undefined,
    [Symbol(#agent)]: {
      _events: {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false,
      defaultPort: 80,
      protocol: "http:",
      options: {
        path: null,
        noDelay: true
      },
      requests: {},
      sockets: {},
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: "lifo",
      maxTotalSockets: undefined,
      totalSocketCount: 0,
      [Symbol(#fakeSocket)]: undefined,
      createConnection: [Function: createConnection],
      getName: [Function: getName],
      addRequest: [Function: addRequest],
      createSocket: [Function: createSocket],
      removeSocket: [Function: removeSocket],
      keepSocketAlive: [Function: keepSocketAlive],
      reuseSocket: [Function: reuseSocket],
      destroy: [Function: destroy],
      setMaxListeners: [Function: setMaxListeners2],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once2],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount2],
      eventNames: [Function: eventNames]
    },
    [Symbol(#path)]: "/extract-cleaner-data-timecard",
    [Symbol(#socketPath)]: undefined,
    [Symbol(#bodyChunks)]: [
      Buffer(93) [ 123, 34, 99, 108, 101, 97, 110, 101, 114, 73, 100, 34, 58, 34, 48, 48, 51, 49, 110, 48, 48, 48, 48, 50, 51, 97, 67, 117, 49, 65, 65, 69, 34, 44, 34, 112, 101, 114, 105, 111, 100, 34, 58, 123, 34, 115, 116, 97, 114, 116, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 49, 45, 50, 48, 34, 44, 34, 101, 110, 100, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 50, 45, 49, 55, 34, 125, 125 ]
    ],
    [Symbol(#fetchRequest)]: null,
    [Symbol(#signal)]: null,
    [Symbol(#timeoutTimer)]: undefined,
    [Symbol(#options)]: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: "http:",
      path: "/extract-cleaner-data-timecard",
      method: "POST",
      headers: {
        Accept: "application/json, text/plain, */*",
        "Content-Type": "application/json",
        "User-Agent": "axios/1.6.2",
        "Content-Length": "93",
        "Accept-Encoding": "gzip, compress, deflate"
      },
      agents: {
        http: undefined,
        https: undefined
      },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function],
      beforeRedirects: {
        proxy: [Function: beforeRedirect]
      },
      hostname: "localhost",
      port: "3000",
      agent: undefined,
      nativeProtocols: {
        "http:": {
          Agent: [class Agent],
          Server: [class Server],
          METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
            "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
            "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
            "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
          STATUS_CODES: {
            "100": "Continue",
            "101": "Switching Protocols",
            "102": "Processing",
            "103": "Early Hints",
            "200": "OK",
            "201": "Created",
            "202": "Accepted",
            "203": "Non-Authoritative Information",
            "204": "No Content",
            "205": "Reset Content",
            "206": "Partial Content",
            "207": "Multi-Status",
            "208": "Already Reported",
            "226": "IM Used",
            "300": "Multiple Choices",
            "301": "Moved Permanently",
            "302": "Found",
            "303": "See Other",
            "304": "Not Modified",
            "305": "Use Proxy",
            "307": "Temporary Redirect",
            "308": "Permanent Redirect",
            "400": "Bad Request",
            "401": "Unauthorized",
            "402": "Payment Required",
            "403": "Forbidden",
            "404": "Not Found",
            "405": "Method Not Allowed",
            "406": "Not Acceptable",
            "407": "Proxy Authentication Required",
            "408": "Request Timeout",
            "409": "Conflict",
            "410": "Gone",
            "411": "Length Required",
            "412": "Precondition Failed",
            "413": "Payload Too Large",
            "414": "URI Too Long",
            "415": "Unsupported Media Type",
            "416": "Range Not Satisfiable",
            "417": "Expectation Failed",
            "418": "I'm a Teapot",
            "421": "Misdirected Request",
            "422": "Unprocessable Entity",
            "423": "Locked",
            "424": "Failed Dependency",
            "425": "Too Early",
            "426": "Upgrade Required",
            "428": "Precondition Required",
            "429": "Too Many Requests",
            "431": "Request Header Fields Too Large",
            "451": "Unavailable For Legal Reasons",
            "500": "Internal Server Error",
            "501": "Not Implemented",
            "502": "Bad Gateway",
            "503": "Service Unavailable",
            "504": "Gateway Timeout",
            "505": "HTTP Version Not Supported",
            "506": "Variant Also Negotiates",
            "507": "Insufficient Storage",
            "508": "Loop Detected",
            "509": "Bandwidth Limit Exceeded",
            "510": "Not Extended",
            "511": "Network Authentication Required"
          },
          createServer: [Function],
          ServerResponse: [class ServerResponse],
          IncomingMessage: [class IncomingMessage],
          request: [Function],
          get: [Function],
          maxHeaderSize: 16384,
          validateHeaderName: [Function],
          validateHeaderValue: [Function],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          globalAgent: {
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false,
            defaultPort: 80,
            protocol: "http:",
            options: {
              path: null,
              noDelay: true
            },
            requests: {},
            sockets: {},
            freeSockets: {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: "lifo",
            maxTotalSockets: undefined,
            totalSocketCount: 0,
            [Symbol(#fakeSocket)]: undefined,
            createConnection: [Function: createConnection],
            getName: [Function: getName],
            addRequest: [Function: addRequest],
            createSocket: [Function: createSocket],
            removeSocket: [Function: removeSocket],
            keepSocketAlive: [Function: keepSocketAlive],
            reuseSocket: [Function: reuseSocket],
            destroy: [Function: destroy],
            setMaxListeners: [Function: setMaxListeners2],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once2],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount2],
            eventNames: [Function: eventNames]
          },
          ClientRequest: [class ClientRequest],
          OutgoingMessage: [class OutgoingMessage]
        },
        "https:": {
          Agent: [class Agent],
          Server: [class Server],
          METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
            "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
            "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
            "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
          STATUS_CODES: {
            "100": "Continue",
            "101": "Switching Protocols",
            "102": "Processing",
            "103": "Early Hints",
            "200": "OK",
            "201": "Created",
            "202": "Accepted",
            "203": "Non-Authoritative Information",
            "204": "No Content",
            "205": "Reset Content",
            "206": "Partial Content",
            "207": "Multi-Status",
            "208": "Already Reported",
            "226": "IM Used",
            "300": "Multiple Choices",
            "301": "Moved Permanently",
            "302": "Found",
            "303": "See Other",
            "304": "Not Modified",
            "305": "Use Proxy",
            "307": "Temporary Redirect",
            "308": "Permanent Redirect",
            "400": "Bad Request",
            "401": "Unauthorized",
            "402": "Payment Required",
            "403": "Forbidden",
            "404": "Not Found",
            "405": "Method Not Allowed",
            "406": "Not Acceptable",
            "407": "Proxy Authentication Required",
            "408": "Request Timeout",
            "409": "Conflict",
            "410": "Gone",
            "411": "Length Required",
            "412": "Precondition Failed",
            "413": "Payload Too Large",
            "414": "URI Too Long",
            "415": "Unsupported Media Type",
            "416": "Range Not Satisfiable",
            "417": "Expectation Failed",
            "418": "I'm a Teapot",
            "421": "Misdirected Request",
            "422": "Unprocessable Entity",
            "423": "Locked",
            "424": "Failed Dependency",
            "425": "Too Early",
            "426": "Upgrade Required",
            "428": "Precondition Required",
            "429": "Too Many Requests",
            "431": "Request Header Fields Too Large",
            "451": "Unavailable For Legal Reasons",
            "500": "Internal Server Error",
            "501": "Not Implemented",
            "502": "Bad Gateway",
            "503": "Service Unavailable",
            "504": "Gateway Timeout",
            "505": "HTTP Version Not Supported",
            "506": "Variant Also Negotiates",
            "507": "Insufficient Storage",
            "508": "Loop Detected",
            "509": "Bandwidth Limit Exceeded",
            "510": "Not Extended",
            "511": "Network Authentication Required"
          },
          createServer: [Function],
          ServerResponse: [class ServerResponse],
          IncomingMessage: [class IncomingMessage],
          request: [Function],
          get: [Function],
          maxHeaderSize: 16384,
          validateHeaderName: [Function],
          validateHeaderValue: [Function],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          globalAgent: {
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false,
            defaultPort: 80,
            protocol: "http:",
            options: {
              path: null,
              noDelay: true
            },
            requests: {},
            sockets: {},
            freeSockets: {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: "lifo",
            maxTotalSockets: undefined,
            totalSocketCount: 0,
            [Symbol(#fakeSocket)]: undefined,
            createConnection: [Function: createConnection],
            getName: [Function: getName],
            addRequest: [Function: addRequest],
            createSocket: [Function: createSocket],
            removeSocket: [Function: removeSocket],
            keepSocketAlive: [Function: keepSocketAlive],
            reuseSocket: [Function: reuseSocket],
            destroy: [Function: destroy],
            setMaxListeners: [Function: setMaxListeners2],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once2],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount2],
            eventNames: [Function: eventNames]
          },
          ClientRequest: [class ClientRequest],
          OutgoingMessage: [class OutgoingMessage]
        }
      },
      pathname: "/extract-cleaner-data-timecard",
      host: "localhost"
    },
    [Symbol(#finished)]: true,
    _events: EventEmitter {
      addListener: [Function: addListener],
      on: [Function: on],
      once: [Function: once],
      prependListener: [Function: prependListener],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: off],
      removeAllListeners: [Function: removeAllListeners],
      emit: [Function: emit],
      eventNames: [Function: eventNames],
      listenerCount: [Function: listenerCount],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners]
    },
    _redirectable: EventEmitter {
      _writableState: {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: "utf8",
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: [],
        getBuffer: [Function: getBuffer],
        bufferedRequestCount: [Getter]
      },
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: "http:",
        path: "/extract-cleaner-data-timecard",
        method: "POST",
        headers: {
          Accept: "application/json, text/plain, */*",
          "Content-Type": "application/json",
          "User-Agent": "axios/1.6.2",
          "Content-Length": "93",
          "Accept-Encoding": "gzip, compress, deflate"
        },
        agents: {
          http: undefined,
          https: undefined
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function],
        beforeRedirects: {
          proxy: [Function: beforeRedirect]
        },
        hostname: "localhost",
        port: "3000",
        agent: undefined,
        nativeProtocols: {
          "http:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          },
          "https:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          }
        },
        pathname: "/extract-cleaner-data-timecard"
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 93,
      _requestBodyBuffers: [],
      _events: EventEmitter {
        addListener: [Function: addListener],
        on: [Function: on],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: off],
        removeAllListeners: [Function: removeAllListeners],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: "http://localhost:3000/extract-cleaner-data-timecard",
      abort: [Function],
      destroy: [Function],
      write: [Function],
      end: [Function],
      setHeader: [Function],
      removeHeader: [Function],
      setTimeout: [Function],
      flushHeaders: [Function],
      getHeader: [Function],
      setNoDelay: [Function],
      setSocketKeepAlive: [Function],
      aborted: [Getter],
      connection: [Getter],
      socket: [Getter],
      _sanitizeOptions: [Function],
      _performRequest: [Function],
      _processResponse: [Function],
      pipe: [Function],
      cork: [Function],
      uncork: [Function],
      setDefaultEncoding: [Function: setDefaultEncoding],
      _write: [Function],
      _writev: null,
      closed: [Getter],
      destroyed: [Getter],
      writable: [Getter],
      writableFinished: [Getter],
      writableObjectMode: [Getter],
      writableBuffer: [Getter],
      writableEnded: [Getter],
      writableNeedDrain: [Getter],
      writableHighWaterMark: [Getter],
      writableCorked: [Getter],
      writableLength: [Getter],
      errored: [Getter],
      writableAborted: [Getter],
      _undestroy: [Function: undestroy],
      _destroy: [Function],
      undefined: [Function],
      addListener: [Function: addListener],
      on: [Function: on],
      once: [Function: once],
      prependListener: [Function: prependListener],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: off],
      removeAllListeners: [Function: removeAllListeners],
      emit: [Function: emit],
      eventNames: [Function: eventNames],
      listenerCount: [Function: listenerCount],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners]
    },
    path: [Getter],
    port: [Getter],
    method: [Getter],
    host: [Getter],
    protocol: [Getter],
    _write: [Function: _write],
    _writev: [Function: _writev],
    _final: [Function: _final],
    aborted: [Getter],
    abort: [Function: abort],
    setSocketKeepAlive: [Function: setSocketKeepAlive],
    setNoDelay: [Function: setNoDelay],
    setTimeout: [Function: setTimeout],
    [Symbol(kClearTimeout)]: [Function],
    _implicitHeader: [Function: _implicitHeader],
    headers: [Getter],
    shouldKeepAlive: [Getter],
    chunkedEncoding: [Getter],
    useChunkedEncodingByDefault: [Getter],
    socket: [Getter],
    connection: [Getter],
    finished: [Getter],
    appendHeader: [Function: appendHeader],
    flushHeaders: [Function: flushHeaders],
    getHeader: [Function: getHeader],
    getHeaders: [Function: getHeaders],
    getHeaderNames: [Function: getHeaderNames],
    removeHeader: [Function: removeHeader],
    setHeader: [Function: setHeader],
    hasHeader: [Function: hasHeader],
    addTrailers: [Function: addTrailers],
    pipe: [Function],
    write: [Function],
    cork: [Function],
    uncork: [Function],
    setDefaultEncoding: [Function: setDefaultEncoding],
    end: [Function],
    closed: [Getter],
    destroyed: [Getter],
    writable: [Getter],
    writableFinished: [Getter],
    writableObjectMode: [Getter],
    writableBuffer: [Getter],
    writableEnded: [Getter],
    writableNeedDrain: [Getter],
    writableHighWaterMark: [Getter],
    writableCorked: [Getter],
    writableLength: [Getter],
    errored: [Getter],
    writableAborted: [Getter],
    destroy: [Function],
    _undestroy: [Function: undestroy],
    _destroy: [Function],
    undefined: [Function]
  },
  response: {
    status: 500,
    statusText: "Internal Server Error",
    headers: AxiosHeaders {
      "access-control-allow-origin": "*",
      "content-type": "application/json; charset=utf-8",
      "content-length": "283",
      etag: "W/\"11b-uKgiqjIVxoRivOiHEWppf/PxPrU\"",
      date: "Mon, 08 Jan 2024 13:54:12 GMT",
      connection: "keep-alive",
      "keep-alive": "timeout=5",
      "x-powered-by": "Express",
      set: [Getter],
      get: [Getter],
      has: [Getter],
      delete: [Getter],
      clear: [Getter],
      normalize: [Getter],
      concat: [Getter],
      toJSON: [Getter],
      toString: [Getter],
      getContentType: [Getter],
      setContentType: [Getter],
      hasContentType: [Getter],
      getContentLength: [Getter],
      setContentLength: [Getter],
      hasContentLength: [Getter],
      getAccept: [Getter],
      setAccept: [Getter],
      hasAccept: [Getter],
      getAcceptEncoding: [Getter],
      setAcceptEncoding: [Getter],
      hasAcceptEncoding: [Getter],
      getUserAgent: [Getter],
      setUserAgent: [Getter],
      hasUserAgent: [Getter],
      getAuthorization: [Getter],
      setAuthorization: [Getter],
      hasAuthorization: [Getter],
      [Symbol(Symbol.iterator)]: [Function]
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ "xhr", "http" ],
      transformRequest: [
        [Function: transformRequest]
      ],
      transformResponse: [
        [Function: transformResponse]
      ],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function],
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: "application/json, text/plain, */*",
        "Content-Type": "application/json",
        "User-Agent": "axios/1.6.2",
        "Content-Length": "93",
        "Accept-Encoding": "gzip, compress, deflate",
        set: [Getter],
        get: [Getter],
        has: [Getter],
        delete: [Getter],
        clear: [Getter],
        normalize: [Getter],
        concat: [Getter],
        toJSON: [Getter],
        toString: [Getter],
        getContentType: [Getter],
        setContentType: [Getter],
        hasContentType: [Getter],
        getContentLength: [Getter],
        setContentLength: [Getter],
        hasContentLength: [Getter],
        getAccept: [Getter],
        setAccept: [Getter],
        hasAccept: [Getter],
        getAcceptEncoding: [Getter],
        setAcceptEncoding: [Getter],
        hasAcceptEncoding: [Getter],
        getUserAgent: [Getter],
        setUserAgent: [Getter],
        hasUserAgent: [Getter],
        getAuthorization: [Getter],
        setAuthorization: [Getter],
        hasAuthorization: [Getter],
        [Symbol(Symbol.iterator)]: [Function]
      },
      method: "post",
      url: "http://localhost:3000/extract-cleaner-data-timecard",
      data: "{\"cleanerId\":\"0031n000023aCu1AAE\",\"period\":{\"startDate\":\"2023-11-20\",\"endDate\":\"2023-12-17\"}}"
    },
    request: EventEmitter {
      _writableState: {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: true,
        destroyed: true,
        decodeStrings: true,
        defaultEncoding: "utf8",
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: true,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        [Symbol(kOnFinished)]: [],
        getBuffer: [Function: getBuffer],
        bufferedRequestCount: [Getter]
      },
      [Symbol(#headers)]: Headers {
        "accept": "application/json, text/plain, */*",
        "content-type": "application/json",
        "user-agent": "axios/1.6.2",
        "content-length": "93",
        "accept-encoding": "gzip, compress, deflate"
      },
      headersSent: false,
      sendDate: true,
      req: undefined,
      timeout: undefined,
      [Symbol(#finished)]: false,
      [Symbol(kEndCalled)]: false,
      [Symbol(#fakeSocket)]: undefined,
      [Symbol(#timeoutTimer)]: undefined,
      [Symbol(kAbortController)]: AbortController {
        signal: AbortSignal {
          aborted: false,
          reason: undefined,
          onabort: null,
          throwIfAborted: [Function: throwIfAborted],
          addEventListener: [Function: addEventListener],
          removeEventListener: [Function: removeEventListener],
          dispatchEvent: [Function: dispatchEvent]
        },
        abort: [Function: abort]
      },
      [Symbol(#timeout)]: undefined,
      [Symbol(#res)]: EventEmitter {
        _readableState: ReadableState {
          pipesCount: 0,
          paused: false,
          flowing: true,
          objectMode: false,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: true,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          closed: true,
          closeEmitted: true,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          length: 0,
          highWaterMark: 16384,
          buffer: {
            length: 0,
            push: [Function: push],
            unshift: [Function: unshift],
            shift: [Function: shift],
            clear: [Function: clear],
            first: [Function: first],
            concat: [Function: concat],
            join: [Function: join],
            consume: [Function: consume]
          },
          pipes: [],
          errored: null,
          defaultEncoding: "utf8",
          awaitDrainWriters: null,
          decoder: null,
          encoding: null
        },
        _events: EventEmitter {
          addListener: [Function: addListener],
          on: [Function: on],
          once: [Function: once],
          prependListener: [Function: prependListener],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: off],
          removeAllListeners: [Function: removeAllListeners],
          emit: [Function: emit],
          eventNames: [Function: eventNames],
          listenerCount: [Function: listenerCount],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners]
        },
        method: undefined,
        complete: false,
        headers: {
          "access-control-allow-origin": "*",
          "content-type": "application/json; charset=utf-8",
          "content-length": "283",
          etag: "W/\"11b-uKgiqjIVxoRivOiHEWppf/PxPrU\"",
          date: "Mon, 08 Jan 2024 13:54:12 GMT",
          connection: "keep-alive",
          "keep-alive": "timeout=5",
          "x-powered-by": "Express"
        },
        rawHeaders: [ "access-control-allow-origin", "*", "content-type", "application/json; charset=utf-8",
          "content-length", "283", "etag", "W/\"11b-uKgiqjIVxoRivOiHEWppf/PxPrU\"", "date", "Mon, 08 Jan 2024 13:54:12 GMT",
          "connection", "keep-alive", "keep-alive", "timeout=5", "x-powered-by", "Express" ],
        _consuming: false,
        _dumped: false,
        [Symbol(#bodyStream)]: ReadableStreamDefaultReader {
          [Symbol(ownerReadableStream)]: ReadableStream {
            [Symbol(state)]: 1,
            [Symbol(reader)]: [Circular],
            [Symbol(storedError)]: undefined,
            [Symbol(disturbed)]: true,
            [Symbol(readableStreamController)]: ReadableByteStreamController {
              [Symbol(controlledReadableStream)]: [Circular],
              [Symbol(underlyingByteSource)]: {
                [Symbol(#cancellationToken)]: {},
                pull: [Function: #pull],
                cancel: [Function: #cancel],
                start: [Function],
                [Symbol(#tag)]: 2705664617568,
                type: "bytes",
                autoAllocateChunkSize: 283
              },
              [Symbol(pullAgain)]: false,
              [Symbol(pulling)]: false,
              [Symbol(pendingPullIntos)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 1,
                _capacityMask: 3,
                _list: [
                  [Object ...], undefined, undefined, undefined
                ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              [Symbol(queue)]: {
                content: {
                  [Symbol(PolyProto)]: [Object ...],
                  _head: 0,
                  _tail: 0,
                  _capacityMask: 3,
                  _list: [ undefined, undefined, undefined, undefined ],
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                size: 0
              },
              [Symbol(started)]: 1,
              [Symbol(closeRequested)]: false,
              [Symbol(strategyHWM)]: 0,
              [Symbol(autoAllocateChunkSize)]: 283,
              [Symbol(cancel)]: [Function: readableByteStreamControllerCancel],
              [Symbol(pull)]: [Function: readableByteStreamControllerPull],
              [Symbol(byobRequest)]: ReadableStreamBYOBRequest {
                [Symbol(associatedReadableByteStreamController)]: [Circular],
                [Symbol(view)]: Uint8Array(283) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                view: [Getter],
                respond: [Function: respond],
                respondWithNewView: [Function: respondWithNewView]
              },
              byobRequest: [Getter],
              desiredSize: [Getter],
              enqueue: [Function: enqueue],
              close: [Function: close],
              error: [Function: error]
            },
            [Symbol(bunNativeType)]: 1,
            [Symbol(asyncContext)]: undefined,
            [Symbol(highWaterMark)]: undefined,
            [Symbol(underlyingSource)]: undefined,
            [Symbol(start)]: undefined,
            locked: [Getter],
            cancel: [Function: cancel],
            getReader: [Function: getReader],
            pipeTo: [Function: pipeTo],
            pipeThrough: [Function: pipeThrough],
            tee: [Function: tee],
            values: [Function: values],
            [Symbol(Symbol.asyncIterator)]: [Function: lazyAsyncIterator]
          },
          [Symbol(closedPromiseCapability)]: {
            resolve: [Function: resolve],
            reject: [Function: reject],
            promise: Promise { <resolved> }
          },
          [Symbol(readRequests)]: {
            [Symbol(PolyProto)]: {
              size: [Function: size],
              isEmpty: [Function: isEmpty],
              isNotEmpty: [Function: isNotEmpty],
              shift: [Function: shift],
              peek: [Function: peek],
              push: [Function: push],
              toArray: [Function: toArray],
              clear: [Function: clear],
              _growArray: [Function: _growArray],
              _shrinkArray: [Function: _shrinkArray]
            },
            _head: 0,
            _tail: 0,
            _capacityMask: 3,
            _list: [ undefined, undefined, undefined, undefined ],
            size: [Function: size],
            isEmpty: [Function: isEmpty],
            isNotEmpty: [Function: isNotEmpty],
            shift: [Function: shift],
            peek: [Function: peek],
            push: [Function: push],
            toArray: [Function: toArray],
            clear: [Function: clear],
            _growArray: [Function: _growArray],
            _shrinkArray: [Function: _shrinkArray]
          },
          closed: [Getter],
          read: [Function: read],
          readMany: [Function: readMany],
          cancel: [Function: cancel],
          releaseLock: [Function: releaseLock]
        },
        [Symbol(#fakeSocket)]: EventEmitter {
          _readableState: ReadableState {
            pipesCount: 0,
            paused: null,
            flowing: null,
            objectMode: false,
            ended: false,
            endEmitted: false,
            reading: false,
            constructed: true,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: false,
            closed: false,
            closeEmitted: false,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: false,
            length: 0,
            highWaterMark: 16384,
            buffer: {
              length: 0,
              push: [Function: push],
              unshift: [Function: unshift],
              shift: [Function: shift],
              clear: [Function: clear],
              first: [Function: first],
              concat: [Function: concat],
              join: [Function: join],
              consume: [Function: consume]
            },
            pipes: [],
            errored: null,
            defaultEncoding: "utf8",
            awaitDrainWriters: null,
            decoder: null,
            encoding: null
          },
          _writableState: {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: "utf8",
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: [],
            getBuffer: [Function: getBuffer],
            bufferedRequestCount: [Getter]
          },
          allowHalfOpen: true,
          [Symbol(::bunternal::)]: undefined,
          bytesRead: 0,
          bytesWritten: 0,
          connecting: false,
          remoteAddress: "localhost",
          remotePort: "3000",
          timeout: 0,
          isServer: false,
          address: [Function: address],
          bufferSize: [Getter],
          connect: [Function: connect],
          _destroy: [Function: _destroy],
          _final: [Function: _final],
          localAddress: [Getter],
          localFamily: [Getter],
          localPort: [Getter],
          pending: [Getter],
          _read: [Function: _read],
          readyState: [Getter],
          ref: [Function: ref],
          remoteFamily: [Getter],
          resetAndDestroy: [Function: resetAndDestroy],
          setKeepAlive: [Function: setKeepAlive],
          setNoDelay: [Function: setNoDelay],
          setTimeout: [Function: setTimeout],
          unref: [Function: unref],
          _write: [Function: _write],
          write: [Function],
          cork: [Function],
          uncork: [Function],
          setDefaultEncoding: [Function: setDefaultEncoding],
          _writev: null,
          end: [Function],
          writable: [Getter],
          writableHighWaterMark: [Getter],
          writableObjectMode: [Getter],
          writableBuffer: [Getter],
          writableLength: [Getter],
          writableFinished: [Getter],
          writableCorked: [Getter],
          writableEnded: [Getter],
          writableNeedDrain: [Getter],
          destroyed: [Getter],
          on: [Function],
          destroy: [Function: destroy2],
          _undestroy: [Function: undestroy],
          undefined: [Function],
          push: [Function],
          unshift: [Function],
          isPaused: [Function],
          setEncoding: [Function],
          read: [Function],
          pipe: [Function],
          unpipe: [Function],
          addListener: [Function],
          removeListener: [Function],
          off: [Function],
          removeAllListeners: [Function],
          resume: [Function],
          pause: [Function],
          wrap: [Function],
          iterator: [Function],
          readable: [Getter],
          readableDidRead: [Getter],
          readableAborted: [Getter],
          readableHighWaterMark: [Getter],
          readableBuffer: [Getter],
          readableFlowing: [Getter],
          readableLength: [Getter],
          readableObjectMode: [Getter],
          readableEncoding: [Getter],
          errored: [Getter],
          closed: [Getter],
          readableEnded: [Getter],
          asIndexedPairs: [Function],
          drop: [Function],
          filter: [Function],
          flatMap: [Function],
          map: [Function],
          take: [Function],
          every: [Function],
          forEach: [Function],
          reduce: [Function],
          toArray: [Function],
          some: [Function],
          find: [Function],
          [Symbol(Symbol.asyncIterator)]: [Function]
        },
        [Symbol(#noBody)]: false,
        [Symbol(#aborted)]: false,
        [Symbol(#req)]: Response (0 KB) {
          ok: false,
          url: "http://localhost:3000/extract-cleaner-data-timecard",
          headers: Headers {
            "access-control-allow-origin": "*",
            "content-type": "application/json; charset=utf-8",
            "content-length": "283",
            "etag": "W/\"11b-uKgiqjIVxoRivOiHEWppf/PxPrU\"",
            "date": "Mon, 08 Jan 2024 13:54:12 GMT",
            "connection": "keep-alive",
            "keep-alive": "timeout=5",
            "x-powered-by": "Express"
          },
          statusText: "Internal Server Error",
          redirected: true,
          bodyUsed: false,
          status: 500,
          ReadableStream {
            [Symbol(state)]: 1,
            [Symbol(reader)]: ReadableStreamDefaultReader {
              [Symbol(ownerReadableStream)]: [Circular],
              [Symbol(closedPromiseCapability)]: {
                resolve: [Function: resolve],
                reject: [Function: reject],
                promise: Promise { <resolved> }
              },
              [Symbol(readRequests)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 0,
                _capacityMask: 3,
                _list: [ undefined, undefined, undefined, undefined ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              closed: [Getter],
              read: [Function: read],
              readMany: [Function: readMany],
              cancel: [Function: cancel],
              releaseLock: [Function: releaseLock]
            },
            [Symbol(storedError)]: undefined,
            [Symbol(disturbed)]: true,
            [Symbol(readableStreamController)]: ReadableByteStreamController {
              [Symbol(controlledReadableStream)]: [Circular],
              [Symbol(underlyingByteSource)]: {
                [Symbol(#cancellationToken)]: {},
                pull: [Function: #pull],
                cancel: [Function: #cancel],
                start: [Function],
                [Symbol(#tag)]: 2705664617568,
                type: "bytes",
                autoAllocateChunkSize: 283
              },
              [Symbol(pullAgain)]: false,
              [Symbol(pulling)]: false,
              [Symbol(pendingPullIntos)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 1,
                _capacityMask: 3,
                _list: [
                  {
                    buffer: ArrayBuffer(283) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                    byteOffset: 0,
                    byteLength: 283,
                    bytesFilled: 0,
                    elementSize: 1,
                    ctor: [class Uint8Array],
                    readerType: "default"
                  }, undefined, undefined, undefined
                ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              [Symbol(queue)]: {
                content: {
                  [Symbol(PolyProto)]: {
                    size: [Function: size],
                    isEmpty: [Function: isEmpty],
                    isNotEmpty: [Function: isNotEmpty],
                    shift: [Function: shift],
                    peek: [Function: peek],
                    push: [Function: push],
                    toArray: [Function: toArray],
                    clear: [Function: clear],
                    _growArray: [Function: _growArray],
                    _shrinkArray: [Function: _shrinkArray]
                  },
                  _head: 0,
                  _tail: 0,
                  _capacityMask: 3,
                  _list: [ undefined, undefined, undefined, undefined ],
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                size: 0
              },
              [Symbol(started)]: 1,
              [Symbol(closeRequested)]: false,
              [Symbol(strategyHWM)]: 0,
              [Symbol(autoAllocateChunkSize)]: 283,
              [Symbol(cancel)]: [Function: readableByteStreamControllerCancel],
              [Symbol(pull)]: [Function: readableByteStreamControllerPull],
              [Symbol(byobRequest)]: ReadableStreamBYOBRequest {
                [Symbol(associatedReadableByteStreamController)]: [Circular],
                [Symbol(view)]: Uint8Array(283) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                view: [Getter],
                respond: [Function: respond],
                respondWithNewView: [Function: respondWithNewView]
              },
              byobRequest: [Getter],
              desiredSize: [Getter],
              enqueue: [Function: enqueue],
              close: [Function: close],
              error: [Function: error]
            },
            [Symbol(bunNativeType)]: 1,
            [Symbol(asyncContext)]: undefined,
            [Symbol(highWaterMark)]: undefined,
            [Symbol(underlyingSource)]: undefined,
            [Symbol(start)]: undefined,
            locked: [Getter],
            cancel: [Function: cancel],
            getReader: [Function: getReader],
            pipeTo: [Function: pipeTo],
            pipeThrough: [Function: pipeThrough],
            tee: [Function: tee],
            values: [Function: values],
            [Symbol(Symbol.asyncIterator)]: [Function: lazyAsyncIterator]
          }
        },
        url: "/extract-cleaner-data-timecard",
        [Symbol(#type)]: "response",
        [Symbol(#nodeReq)]: [Circular],
        req: [Circular],
        responseUrl: "http://localhost:3000/extract-cleaner-data-timecard",
        redirects: [],
        _construct: [Function: _construct],
        _read: [Function: _read],
        aborted: [Getter],
        connection: [Getter],
        statusCode: [Getter],
        statusMessage: [Getter],
        httpVersion: [Getter],
        rawTrailers: [Getter],
        httpVersionMajor: [Getter],
        httpVersionMinor: [Getter],
        trailers: [Getter],
        socket: [Getter],
        setTimeout: [Function: setTimeout],
        on: [Function],
        destroy: [Function: destroy2],
        _undestroy: [Function: undestroy],
        _destroy: [Function],
        undefined: [Function],
        push: [Function],
        unshift: [Function],
        isPaused: [Function],
        setEncoding: [Function],
        read: [Function],
        pipe: [Function],
        unpipe: [Function],
        addListener: [Function],
        removeListener: [Function],
        off: [Function],
        removeAllListeners: [Function],
        resume: [Function],
        pause: [Function],
        wrap: [Function],
        iterator: [Function],
        readable: [Getter],
        readableDidRead: [Getter],
        readableAborted: [Getter],
        readableHighWaterMark: [Getter],
        readableBuffer: [Getter],
        readableFlowing: [Getter],
        readableLength: [Getter],
        readableObjectMode: [Getter],
        readableEncoding: [Getter],
        errored: [Getter],
        closed: [Getter],
        destroyed: [Getter],
        readableEnded: [Getter],
        asIndexedPairs: [Function],
        drop: [Function],
        filter: [Function],
        flatMap: [Function],
        map: [Function],
        take: [Function],
        every: [Function],
        forEach: [Function],
        reduce: [Function],
        toArray: [Function],
        some: [Function],
        find: [Function],
        [Symbol(Symbol.asyncIterator)]: [Function],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      [Symbol(#upgradeOrConnect)]: false,
      [Symbol(#parser)]: null,
      [Symbol(#maxHeadersCount)]: null,
      [Symbol(#reusedSocket)]: false,
      [Symbol(#host)]: "localhost",
      [Symbol(#protocol)]: "http:",
      [Symbol(#method)]: "POST",
      [Symbol(#port)]: "3000",
      [Symbol(#useDefaultPort)]: false,
      [Symbol(#joinDuplicateHeaders)]: undefined,
      [Symbol(#maxHeaderSize)]: undefined,
      [Symbol(#agent)]: {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false,
        defaultPort: 80,
        protocol: "http:",
        options: {
          path: null,
          noDelay: true
        },
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: "lifo",
        maxTotalSockets: undefined,
        totalSocketCount: 0,
        [Symbol(#fakeSocket)]: undefined,
        createConnection: [Function: createConnection],
        getName: [Function: getName],
        addRequest: [Function: addRequest],
        createSocket: [Function: createSocket],
        removeSocket: [Function: removeSocket],
        keepSocketAlive: [Function: keepSocketAlive],
        reuseSocket: [Function: reuseSocket],
        destroy: [Function: destroy],
        setMaxListeners: [Function: setMaxListeners2],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once2],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount2],
        eventNames: [Function: eventNames]
      },
      [Symbol(#path)]: "/extract-cleaner-data-timecard",
      [Symbol(#socketPath)]: undefined,
      [Symbol(#bodyChunks)]: [
        Buffer(93) [ 123, 34, 99, 108, 101, 97, 110, 101, 114, 73, 100, 34, 58, 34, 48, 48, 51, 49, 110, 48, 48, 48, 48, 50, 51, 97, 67, 117, 49, 65, 65, 69, 34, 44, 34, 112, 101, 114, 105, 111, 100, 34, 58, 123, 34, 115, 116, 97, 114, 116, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 49, 45, 50, 48, 34, 44, 34, 101, 110, 100, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 50, 45, 49, 55, 34, 125, 125 ]
      ],
      [Symbol(#fetchRequest)]: null,
      [Symbol(#signal)]: null,
      [Symbol(#timeoutTimer)]: undefined,
      [Symbol(#options)]: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: "http:",
        path: "/extract-cleaner-data-timecard",
        method: "POST",
        headers: {
          Accept: "application/json, text/plain, */*",
          "Content-Type": "application/json",
          "User-Agent": "axios/1.6.2",
          "Content-Length": "93",
          "Accept-Encoding": "gzip, compress, deflate"
        },
        agents: {
          http: undefined,
          https: undefined
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function],
        beforeRedirects: {
          proxy: [Function: beforeRedirect]
        },
        hostname: "localhost",
        port: "3000",
        agent: undefined,
        nativeProtocols: {
          "http:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          },
          "https:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          }
        },
        pathname: "/extract-cleaner-data-timecard",
        host: "localhost"
      },
      [Symbol(#finished)]: true,
      _events: EventEmitter {
        addListener: [Function: addListener],
        on: [Function: on],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: off],
        removeAllListeners: [Function: removeAllListeners],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      _redirectable: EventEmitter {
        _writableState: {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: "utf8",
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: [],
          getBuffer: [Function: getBuffer],
          bufferedRequestCount: [Getter]
        },
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: "http:",
          path: "/extract-cleaner-data-timecard",
          method: "POST",
          headers: {
            Accept: "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.6.2",
            "Content-Length": "93",
            "Accept-Encoding": "gzip, compress, deflate"
          },
          agents: {
            http: undefined,
            https: undefined
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function],
          beforeRedirects: {
            proxy: [Function: beforeRedirect]
          },
          hostname: "localhost",
          port: "3000",
          agent: undefined,
          nativeProtocols: {
            "http:": {
              Agent: [class Agent],
              Server: [class Server],
              METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK",
                "M-SEARCH", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH",
                "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE",
                "TRACE", "UNBIND", "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
              STATUS_CODES: {
                "100": "Continue",
                "101": "Switching Protocols",
                "102": "Processing",
                "103": "Early Hints",
                "200": "OK",
                "201": "Created",
                "202": "Accepted",
                "203": "Non-Authoritative Information",
                "204": "No Content",
                "205": "Reset Content",
                "206": "Partial Content",
                "207": "Multi-Status",
                "208": "Already Reported",
                "226": "IM Used",
                "300": "Multiple Choices",
                "301": "Moved Permanently",
                "302": "Found",
                "303": "See Other",
                "304": "Not Modified",
                "305": "Use Proxy",
                "307": "Temporary Redirect",
                "308": "Permanent Redirect",
                "400": "Bad Request",
                "401": "Unauthorized",
                "402": "Payment Required",
                "403": "Forbidden",
                "404": "Not Found",
                "405": "Method Not Allowed",
                "406": "Not Acceptable",
                "407": "Proxy Authentication Required",
                "408": "Request Timeout",
                "409": "Conflict",
                "410": "Gone",
                "411": "Length Required",
                "412": "Precondition Failed",
                "413": "Payload Too Large",
                "414": "URI Too Long",
                "415": "Unsupported Media Type",
                "416": "Range Not Satisfiable",
                "417": "Expectation Failed",
                "418": "I'm a Teapot",
                "421": "Misdirected Request",
                "422": "Unprocessable Entity",
                "423": "Locked",
                "424": "Failed Dependency",
                "425": "Too Early",
                "426": "Upgrade Required",
                "428": "Precondition Required",
                "429": "Too Many Requests",
                "431": "Request Header Fields Too Large",
                "451": "Unavailable For Legal Reasons",
                "500": "Internal Server Error",
                "501": "Not Implemented",
                "502": "Bad Gateway",
                "503": "Service Unavailable",
                "504": "Gateway Timeout",
                "505": "HTTP Version Not Supported",
                "506": "Variant Also Negotiates",
                "507": "Insufficient Storage",
                "508": "Loop Detected",
                "509": "Bandwidth Limit Exceeded",
                "510": "Not Extended",
                "511": "Network Authentication Required"
              },
              createServer: [Function],
              ServerResponse: [class ServerResponse],
              IncomingMessage: [class IncomingMessage],
              request: [Function],
              get: [Function],
              maxHeaderSize: 16384,
              validateHeaderName: [Function],
              validateHeaderValue: [Function],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              globalAgent: {
                _events: {},
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                defaultPort: 80,
                protocol: "http:",
                options: {
                  path: null,
                  noDelay: true
                },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: "lifo",
                maxTotalSockets: undefined,
                totalSocketCount: 0,
                [Symbol(#fakeSocket)]: undefined,
                createConnection: [Function: createConnection],
                getName: [Function: getName],
                addRequest: [Function: addRequest],
                createSocket: [Function: createSocket],
                removeSocket: [Function: removeSocket],
                keepSocketAlive: [Function: keepSocketAlive],
                reuseSocket: [Function: reuseSocket],
                destroy: [Function: destroy],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames]
              },
              ClientRequest: [class ClientRequest],
              OutgoingMessage: [class OutgoingMessage]
            },
            "https:": {
              Agent: [class Agent],
              Server: [class Server],
              METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK",
                "M-SEARCH", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH",
                "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE",
                "TRACE", "UNBIND", "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
              STATUS_CODES: {
                "100": "Continue",
                "101": "Switching Protocols",
                "102": "Processing",
                "103": "Early Hints",
                "200": "OK",
                "201": "Created",
                "202": "Accepted",
                "203": "Non-Authoritative Information",
                "204": "No Content",
                "205": "Reset Content",
                "206": "Partial Content",
                "207": "Multi-Status",
                "208": "Already Reported",
                "226": "IM Used",
                "300": "Multiple Choices",
                "301": "Moved Permanently",
                "302": "Found",
                "303": "See Other",
                "304": "Not Modified",
                "305": "Use Proxy",
                "307": "Temporary Redirect",
                "308": "Permanent Redirect",
                "400": "Bad Request",
                "401": "Unauthorized",
                "402": "Payment Required",
                "403": "Forbidden",
                "404": "Not Found",
                "405": "Method Not Allowed",
                "406": "Not Acceptable",
                "407": "Proxy Authentication Required",
                "408": "Request Timeout",
                "409": "Conflict",
                "410": "Gone",
                "411": "Length Required",
                "412": "Precondition Failed",
                "413": "Payload Too Large",
                "414": "URI Too Long",
                "415": "Unsupported Media Type",
                "416": "Range Not Satisfiable",
                "417": "Expectation Failed",
                "418": "I'm a Teapot",
                "421": "Misdirected Request",
                "422": "Unprocessable Entity",
                "423": "Locked",
                "424": "Failed Dependency",
                "425": "Too Early",
                "426": "Upgrade Required",
                "428": "Precondition Required",
                "429": "Too Many Requests",
                "431": "Request Header Fields Too Large",
                "451": "Unavailable For Legal Reasons",
                "500": "Internal Server Error",
                "501": "Not Implemented",
                "502": "Bad Gateway",
                "503": "Service Unavailable",
                "504": "Gateway Timeout",
                "505": "HTTP Version Not Supported",
                "506": "Variant Also Negotiates",
                "507": "Insufficient Storage",
                "508": "Loop Detected",
                "509": "Bandwidth Limit Exceeded",
                "510": "Not Extended",
                "511": "Network Authentication Required"
              },
              createServer: [Function],
              ServerResponse: [class ServerResponse],
              IncomingMessage: [class IncomingMessage],
              request: [Function],
              get: [Function],
              maxHeaderSize: 16384,
              validateHeaderName: [Function],
              validateHeaderValue: [Function],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              globalAgent: {
                _events: {},
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                defaultPort: 80,
                protocol: "http:",
                options: {
                  path: null,
                  noDelay: true
                },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: "lifo",
                maxTotalSockets: undefined,
                totalSocketCount: 0,
                [Symbol(#fakeSocket)]: undefined,
                createConnection: [Function: createConnection],
                getName: [Function: getName],
                addRequest: [Function: addRequest],
                createSocket: [Function: createSocket],
                removeSocket: [Function: removeSocket],
                keepSocketAlive: [Function: keepSocketAlive],
                reuseSocket: [Function: reuseSocket],
                destroy: [Function: destroy],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames]
              },
              ClientRequest: [class ClientRequest],
              OutgoingMessage: [class OutgoingMessage]
            }
          },
          pathname: "/extract-cleaner-data-timecard"
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 93,
        _requestBodyBuffers: [],
        _events: EventEmitter {
          addListener: [Function: addListener],
          on: [Function: on],
          once: [Function: once],
          prependListener: [Function: prependListener],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: off],
          removeAllListeners: [Function: removeAllListeners],
          emit: [Function: emit],
          eventNames: [Function: eventNames],
          listenerCount: [Function: listenerCount],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners]
        },
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: "http://localhost:3000/extract-cleaner-data-timecard",
        abort: [Function],
        destroy: [Function],
        write: [Function],
        end: [Function],
        setHeader: [Function],
        removeHeader: [Function],
        setTimeout: [Function],
        flushHeaders: [Function],
        getHeader: [Function],
        setNoDelay: [Function],
        setSocketKeepAlive: [Function],
        aborted: [Getter],
        connection: [Getter],
        socket: [Getter],
        _sanitizeOptions: [Function],
        _performRequest: [Function],
        _processResponse: [Function],
        pipe: [Function],
        cork: [Function],
        uncork: [Function],
        setDefaultEncoding: [Function: setDefaultEncoding],
        _write: [Function],
        _writev: null,
        closed: [Getter],
        destroyed: [Getter],
        writable: [Getter],
        writableFinished: [Getter],
        writableObjectMode: [Getter],
        writableBuffer: [Getter],
        writableEnded: [Getter],
        writableNeedDrain: [Getter],
        writableHighWaterMark: [Getter],
        writableCorked: [Getter],
        writableLength: [Getter],
        errored: [Getter],
        writableAborted: [Getter],
        _undestroy: [Function: undestroy],
        _destroy: [Function],
        undefined: [Function],
        addListener: [Function: addListener],
        on: [Function: on],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: off],
        removeAllListeners: [Function: removeAllListeners],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      path: [Getter],
      port: [Getter],
      method: [Getter],
      host: [Getter],
      protocol: [Getter],
      _write: [Function: _write],
      _writev: [Function: _writev],
      _final: [Function: _final],
      aborted: [Getter],
      abort: [Function: abort],
      setSocketKeepAlive: [Function: setSocketKeepAlive],
      setNoDelay: [Function: setNoDelay],
      setTimeout: [Function: setTimeout],
      [Symbol(kClearTimeout)]: [Function],
      _implicitHeader: [Function: _implicitHeader],
      headers: [Getter],
      shouldKeepAlive: [Getter],
      chunkedEncoding: [Getter],
      useChunkedEncodingByDefault: [Getter],
      socket: [Getter],
      connection: [Getter],
      finished: [Getter],
      appendHeader: [Function: appendHeader],
      flushHeaders: [Function: flushHeaders],
      getHeader: [Function: getHeader],
      getHeaders: [Function: getHeaders],
      getHeaderNames: [Function: getHeaderNames],
      removeHeader: [Function: removeHeader],
      setHeader: [Function: setHeader],
      hasHeader: [Function: hasHeader],
      addTrailers: [Function: addTrailers],
      pipe: [Function],
      write: [Function],
      cork: [Function],
      uncork: [Function],
      setDefaultEncoding: [Function: setDefaultEncoding],
      end: [Function],
      closed: [Getter],
      destroyed: [Getter],
      writable: [Getter],
      writableFinished: [Getter],
      writableObjectMode: [Getter],
      writableBuffer: [Getter],
      writableEnded: [Getter],
      writableNeedDrain: [Getter],
      writableHighWaterMark: [Getter],
      writableCorked: [Getter],
      writableLength: [Getter],
      errored: [Getter],
      writableAborted: [Getter],
      destroy: [Function],
      _undestroy: [Function: undestroy],
      _destroy: [Function],
      undefined: [Function]
    },
    data: {
      error: "An error occurredError while extracting data for cleaner: cannot decode {\"period\":{\"start\":\"2019-11-01\",\"end\":\"2019-11-13\"},\"type\":\"CDI\",\"extraDuration\":\"PT0S\",\"subType\":\"CDI\",\"weeklyHours\":\"PT0S\"}, should be Cannot have a contract without hours"
    }
  },
  toJSON: [Function: toJSON],
  isAxiosError: true,
  toString: [Function: toString]
}
Mangnalé KARAMOKO OK 251/370 (error : 13)
Michael CASSIEN OK 252/370 (error : 13)
Ahmed MAIGA OK 253/370 (error : 13)
Nozha SGHIR OK 254/370 (error : 13)
Diati SIBY OK 255/370 (error : 13)
Marie Yolene CARRENAN (00680) OK 256/370 (error : 13)
keizer STORCH FERRARI OK 257/370 (error : 13)
Binto Serre SERRET OK 258/370 (error : 13)
Brahim BOULAAJINE OK 259/370 (error : 13)
Gemma ALCOVENDAS OK 260/370 (error : 13)
James Ansu AMPONSAH OK 261/370 (error : 13)
Herene Da Conceicao Pereira Martins OK 262/370 (error : 13)
Imène SBAA OK 263/370 (error : 13)
Niatou DIABY OK 264/370 (error : 13)
Adama COULIBALY (00717) OK 265/370 (error : 13)
Bruna DA SILVA BELO CAMPOS error :
Ibrahima CISSE OK 266/370 (error : 14)
Rkia BOULIL OK 267/370 (error : 14)
Koudouss GANDONOU OK 268/370 (error : 14)
Darlène MARC OK 269/370 (error : 14)
Mahamadou Tounkara OK 270/370 (error : 14)
Morufat AFOLABI OK 271/370 (error : 14)
Fatima Farissi OK 272/370 (error : 14)
Maria Otelinda BORGES CABRAL OK 273/370 (error : 14)
Budler APOLLON OK 274/370 (error : 14)
Mamadou SIDIBE(309) OK 275/370 (error : 14)
Fatoumata SACKO OK 276/370 (error : 14)
Zeus REYES OK 277/370 (error : 14)
Lahoucine HRROUG OK 278/370 (error : 14)
Dangba Sanogo OK 279/370 (error : 14)
Jesumène BRUTUS OK 280/370 (error : 14)
Khadidja SARABIAN OK 281/370 (error : 14)
Mariam Remy OK 282/370 (error : 14)
Farida MEBTOUCHE OK 283/370 (error : 14)
Taieb OUIHI OK 284/370 (error : 14)
Maria Gomes Correia OK 285/370 (error : 14)
Léonia BUISSERETH OK 286/370 (error : 14)
Shanthadevi NAGULESWARAN OK 287/370 (error : 14)
Ibrahima CISSE (01124) OK 288/370 (error : 14)
Kadiatou KOUYATE OK 289/370 (error : 14)
Neslihan GULER OK 290/370 (error : 14)
Mona BOUZOUMITA OK 291/370 (error : 14)
Iara Reale OK 292/370 (error : 14)
Eliatha SUFFRARD OK 293/370 (error : 14)
Irégré GATTA OK 294/370 (error : 14)
Mamou SISSOKO OK 295/370 (error : 14)
Mohamed HADJ BENALLOU OK 296/370 (error : 14)
Umathevy VIJAYAKUMAR OK 297/370 (error : 14)
Bouna CAMARA OK 298/370 (error : 14)
Salou WANE OK 299/370 (error : 14)
Ana Da Gloria AFONSO OK 300/370 (error : 14)
Lucia PEREIRA VARELA OK 301/370 (error : 14)
Bakara DIOUMASSY OK 302/370 (error : 14)
Alicia LUMBA OK 303/370 (error : 14)
Estelita AGUSTIN MANUEL OK 304/370 (error : 14)
Fritzner PIERRE OK 305/370 (error : 14)
Gate CAMARA OK 306/370 (error : 14)
Mostapha Fekkak OK 307/370 (error : 14)
El Hassen CAMARA OK 308/370 (error : 14)
Brahim EL MOUDEN OK 309/370 (error : 14)
Selma Rossi OK 310/370 (error : 14)
Mariama Darame OK 311/370 (error : 14)
Moussa CAMARA (01187) error :
Crisselle DE GALA CARANDANG OK 312/370 (error : 15)
Kaoutar BENKIRANE OK 313/370 (error : 15)
Salima RAHMA OK 314/370 (error : 15)
Abouderaman KÉBÉ OK 315/370 (error : 15)
Mansenan Fofana OK 316/370 (error : 15)
Maria Jesus LOPES TAVARES OK 317/370 (error : 15)
Jamila AIT OULAHYAN OK 318/370 (error : 15)
Morgane MA (nul) error :
Austolina MENDES DA COSTA OK 319/370 (error : 16)
Aissatou TRAORE OK 320/370 (error : 16)
Constantino CATUMBER OK 321/370 (error : 16)
Ivete LOPES TAVARES error :
Marie Pierre PARE QUENUM OK 322/370 (error : 17)
MOUCHIH Zoulikha OK 323/370 (error : 17)
Nyimanding TAMBA OK 324/370 (error : 17)
Chienin ASSAMOI OK 325/370 (error : 17)
Dulcelina MARTINS CORREIA OK 326/370 (error : 17)
Lucidia VARELA TAVARES OK 327/370 (error : 17)
Mohamed KAJAKJI OK 328/370 (error : 17)
Assiata DJAE OK 329/370 (error : 17)
Hawa SY OK 330/370 (error : 17)
Maria Jaquelina SILVA DE BARROS OK 331/370 (error : 17)
Mahamadou Kaka DIOUWARA OK 332/370 (error : 17)
Chekhou CISSOKHO OK 333/370 (error : 17)
Evanda BEZERRA DE BRITO OK 334/370 (error : 17)
Umadevi SRIKANTHAN OK 335/370 (error : 17)
Aghibou TANDIA OK 336/370 (error : 17)
Noella BAZILUKA OK 337/370 (error : 17)
Moussa CAMARA (563) OK 338/370 (error : 17)
Cheikhou DIAWARA OK 339/370 (error : 17)
Fatima AIT ABDELLAH OK 340/370 (error : 17)
Mama DRAME OK 341/370 (error : 17)
Marvie BOAC OK 342/370 (error : 17)
Samba CAMARA OK 343/370 (error : 17)
Papa DIOP OK 344/370 (error : 17)
Zineb Bouagoune OK 345/370 (error : 17)
Regiele CORDEIRO OK 346/370 (error : 17)
Hemalatha YOGARAJAN OK 347/370 (error : 17)
Madeleine KAKANDA AMBA OK 348/370 (error : 17)
Bouchra JEANNET OK 349/370 (error : 17)
 [Symbol(kOnFinished)]: [],
        getBuffer: [Function: getBuffer],
        bufferedRequestCount: [Getter]
      },
      [Symbol(#headers)]: Headers {
        "accept": "application/json, text/plain, */*",
        "content-type": "application/json",
        "user-agent": "axios/1.6.2",
        "content-length": "93",
        "accept-encoding": "gzip, compress, deflate"
      },
      headersSent: false,
      sendDate: true,
      req: undefined,
      timeout: undefined,
      [Symbol(#finished)]: false,
      [Symbol(kEndCalled)]: false,
      [Symbol(#fakeSocket)]: undefined,
      [Symbol(#timeoutTimer)]: undefined,
      [Symbol(kAbortController)]: AbortController {
        signal: AbortSignal {
          aborted: false,
          reason: undefined,
          onabort: null,
          throwIfAborted: [Function: throwIfAborted],
          addEventListener: [Function: addEventListener],
          removeEventListener: [Function: removeEventListener],
          dispatchEvent: [Function: dispatchEvent]
        },
        abort: [Function: abort]
      },
      [Symbol(#timeout)]: undefined,
      [Symbol(#res)]: EventEmitter {
        _readableState: ReadableState {
          pipesCount: 0,
          paused: false,
          flowing: true,
          objectMode: false,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: true,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          closed: true,
          closeEmitted: true,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          length: 0,
          highWaterMark: 16384,
          buffer: {
            length: 0,
            push: [Function: push],
            unshift: [Function: unshift],
            shift: [Function: shift],
            clear: [Function: clear],
            first: [Function: first],
            concat: [Function: concat],
            join: [Function: join],
            consume: [Function: consume]
          },
          pipes: [],
          errored: null,
          defaultEncoding: "utf8",
          awaitDrainWriters: null,
          decoder: null,
          encoding: null
        },
        _events: EventEmitter {
          addListener: [Function: addListener],
          on: [Function: on],
          once: [Function: once],
          prependListener: [Function: prependListener],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: off],
          removeAllListeners: [Function: removeAllListeners],
          emit: [Function: emit],
          eventNames: [Function: eventNames],
          listenerCount: [Function: listenerCount],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners]
        },
        method: undefined,
        complete: false,
        headers: {
          "access-control-allow-origin": "*",
          "content-type": "application/json; charset=utf-8",
          "content-length": "211",
          etag: "W/\"d3-+irdi3ksjF9pU5hOsbcTzNa6Zl0\"",
          date: "Mon, 08 Jan 2024 13:52:06 GMT",
          connection: "keep-alive",
          "keep-alive": "timeout=5",
          "x-powered-by": "Express"
        },
        rawHeaders: [ "access-control-allow-origin", "*", "content-type", "application/json; charset=utf-8",
          "content-length", "211", "etag", "W/\"d3-+irdi3ksjF9pU5hOsbcTzNa6Zl0\"", "date", "Mon, 08 Jan 2024 13:52:06 GMT",
          "connection", "keep-alive", "keep-alive", "timeout=5", "x-powered-by", "Express" ],
        _consuming: false,
        _dumped: false,
        [Symbol(#bodyStream)]: ReadableStreamDefaultReader {
          [Symbol(ownerReadableStream)]: ReadableStream {
            [Symbol(state)]: 1,
            [Symbol(reader)]: [Circular],
            [Symbol(storedError)]: undefined,
            [Symbol(disturbed)]: true,
            [Symbol(readableStreamController)]: ReadableByteStreamController {
              [Symbol(controlledReadableStream)]: [Circular],
              [Symbol(underlyingByteSource)]: {
                [Symbol(#cancellationToken)]: {},
                pull: [Function: #pull],
                cancel: [Function: #cancel],
                start: [Function],
                [Symbol(#tag)]: 2705664584752,
                type: "bytes",
                autoAllocateChunkSize: 211
              },
              [Symbol(pullAgain)]: false,
              [Symbol(pulling)]: false,
              [Symbol(pendingPullIntos)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 1,
                _capacityMask: 3,
                _list: [
                  [Object ...], undefined, undefined, undefined
                ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              [Symbol(queue)]: {
                content: {
                  [Symbol(PolyProto)]: [Object ...],
                  _head: 0,
                  _tail: 0,
                  _capacityMask: 3,
                  _list: [ undefined, undefined, undefined, undefined ],
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                size: 0
              },
              [Symbol(started)]: 1,
              [Symbol(closeRequested)]: false,
              [Symbol(strategyHWM)]: 0,
              [Symbol(autoAllocateChunkSize)]: 211,
              [Symbol(cancel)]: [Function: readableByteStreamControllerCancel],
              [Symbol(pull)]: [Function: readableByteStreamControllerPull],
              [Symbol(byobRequest)]: ReadableStreamBYOBRequest {
                [Symbol(associatedReadableByteStreamController)]: [Circular],
                [Symbol(view)]: Uint8Array(211) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                view: [Getter],
                respond: [Function: respond],
                respondWithNewView: [Function: respondWithNewView]
              },
              byobRequest: [Getter],
              desiredSize: [Getter],
              enqueue: [Function: enqueue],
              close: [Function: close],
              error: [Function: error]
            },
            [Symbol(bunNativeType)]: 1,
            [Symbol(asyncContext)]: undefined,
            [Symbol(highWaterMark)]: undefined,
            [Symbol(underlyingSource)]: undefined,
            [Symbol(start)]: undefined,
            locked: [Getter],
            cancel: [Function: cancel],
            getReader: [Function: getReader],
            pipeTo: [Function: pipeTo],
            pipeThrough: [Function: pipeThrough],
            tee: [Function: tee],
            values: [Function: values],
            [Symbol(Symbol.asyncIterator)]: [Function: lazyAsyncIterator]
          },
          [Symbol(closedPromiseCapability)]: {
            resolve: [Function: resolve],
            reject: [Function: reject],
            promise: Promise { <resolved> }
          },
          [Symbol(readRequests)]: {
            [Symbol(PolyProto)]: {
              size: [Function: size],
              isEmpty: [Function: isEmpty],
              isNotEmpty: [Function: isNotEmpty],
              shift: [Function: shift],
              peek: [Function: peek],
              push: [Function: push],
              toArray: [Function: toArray],
              clear: [Function: clear],
              _growArray: [Function: _growArray],
              _shrinkArray: [Function: _shrinkArray]
            },
            _head: 0,
            _tail: 0,
            _capacityMask: 3,
            _list: [ undefined, undefined, undefined, undefined ],
            size: [Function: size],
            isEmpty: [Function: isEmpty],
            isNotEmpty: [Function: isNotEmpty],
            shift: [Function: shift],
            peek: [Function: peek],
            push: [Function: push],
            toArray: [Function: toArray],
            clear: [Function: clear],
            _growArray: [Function: _growArray],
            _shrinkArray: [Function: _shrinkArray]
          },
          closed: [Getter],
          read: [Function: read],
          readMany: [Function: readMany],
          cancel: [Function: cancel],
          releaseLock: [Function: releaseLock]
        },
        [Symbol(#fakeSocket)]: EventEmitter {
          _readableState: ReadableState {
            pipesCount: 0,
            paused: null,
            flowing: null,
            objectMode: false,
            ended: false,
            endEmitted: false,
            reading: false,
            constructed: true,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: false,
            closed: false,
            closeEmitted: false,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: false,
            length: 0,
            highWaterMark: 16384,
            buffer: {
              length: 0,
              push: [Function: push],
              unshift: [Function: unshift],
              shift: [Function: shift],
              clear: [Function: clear],
              first: [Function: first],
              concat: [Function: concat],
              join: [Function: join],
              consume: [Function: consume]
            },
            pipes: [],
            errored: null,
            defaultEncoding: "utf8",
            awaitDrainWriters: null,
            decoder: null,
            encoding: null
          },
          _writableState: {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: "utf8",
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: [],
            getBuffer: [Function: getBuffer],
            bufferedRequestCount: [Getter]
          },
          allowHalfOpen: true,
          [Symbol(::bunternal::)]: undefined,
          bytesRead: 0,
          bytesWritten: 0,
          connecting: false,
          remoteAddress: "localhost",
          remotePort: "3000",
          timeout: 0,
          isServer: false,
          address: [Function: address],
          bufferSize: [Getter],
          connect: [Function: connect],
          _destroy: [Function: _destroy],
          _final: [Function: _final],
          localAddress: [Getter],
          localFamily: [Getter],
          localPort: [Getter],
          pending: [Getter],
          _read: [Function: _read],
          readyState: [Getter],
          ref: [Function: ref],
          remoteFamily: [Getter],
          resetAndDestroy: [Function: resetAndDestroy],
          setKeepAlive: [Function: setKeepAlive],
          setNoDelay: [Function: setNoDelay],
          setTimeout: [Function: setTimeout],
          unref: [Function: unref],
          _write: [Function: _write],
          write: [Function],
          cork: [Function],
          uncork: [Function],
          setDefaultEncoding: [Function: setDefaultEncoding],
          _writev: null,
          end: [Function],
          writable: [Getter],
          writableHighWaterMark: [Getter],
          writableObjectMode: [Getter],
          writableBuffer: [Getter],
          writableLength: [Getter],
          writableFinished: [Getter],
          writableCorked: [Getter],
          writableEnded: [Getter],
          writableNeedDrain: [Getter],
          destroyed: [Getter],
          on: [Function],
          destroy: [Function: destroy2],
          _undestroy: [Function: undestroy],
          undefined: [Function],
          push: [Function],
          unshift: [Function],
          isPaused: [Function],
          setEncoding: [Function],
          read: [Function],
          pipe: [Function],
          unpipe: [Function],
          addListener: [Function],
          removeListener: [Function],
          off: [Function],
          removeAllListeners: [Function],
          resume: [Function],
          pause: [Function],
          wrap: [Function],
          iterator: [Function],
          readable: [Getter],
          readableDidRead: [Getter],
          readableAborted: [Getter],
          readableHighWaterMark: [Getter],
          readableBuffer: [Getter],
          readableFlowing: [Getter],
          readableLength: [Getter],
          readableObjectMode: [Getter],
          readableEncoding: [Getter],
          errored: [Getter],
          closed: [Getter],
          readableEnded: [Getter],
          asIndexedPairs: [Function],
          drop: [Function],
          filter: [Function],
          flatMap: [Function],
          map: [Function],
          take: [Function],
          every: [Function],
          forEach: [Function],
          reduce: [Function],
          toArray: [Function],
          some: [Function],
          find: [Function],
          [Symbol(Symbol.asyncIterator)]: [Function]
        },
        [Symbol(#noBody)]: false,
        [Symbol(#aborted)]: false,
        [Symbol(#req)]: Response (0 KB) {
          ok: false,
          url: "http://localhost:3000/extract-cleaner-data-timecard",
          headers: Headers {
            "access-control-allow-origin": "*",
            "content-type": "application/json; charset=utf-8",
            "content-length": "211",
            "etag": "W/\"d3-+irdi3ksjF9pU5hOsbcTzNa6Zl0\"",
            "date": "Mon, 08 Jan 2024 13:52:06 GMT",
            "connection": "keep-alive",
            "keep-alive": "timeout=5",
            "x-powered-by": "Express"
          },
          statusText: "Internal Server Error",
          redirected: true,
          bodyUsed: false,
          status: 500,
          ReadableStream {
            [Symbol(state)]: 1,
            [Symbol(reader)]: ReadableStreamDefaultReader {
              [Symbol(ownerReadableStream)]: [Circular],
              [Symbol(closedPromiseCapability)]: {
                resolve: [Function: resolve],
                reject: [Function: reject],
                promise: Promise { <resolved> }
              },
              [Symbol(readRequests)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 0,
                _capacityMask: 3,
                _list: [ undefined, undefined, undefined, undefined ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              closed: [Getter],
              read: [Function: read],
              readMany: [Function: readMany],
              cancel: [Function: cancel],
              releaseLock: [Function: releaseLock]
            },
            [Symbol(storedError)]: undefined,
            [Symbol(disturbed)]: true,
            [Symbol(readableStreamController)]: ReadableByteStreamController {
              [Symbol(controlledReadableStream)]: [Circular],
              [Symbol(underlyingByteSource)]: {
                [Symbol(#cancellationToken)]: {},
                pull: [Function: #pull],
                cancel: [Function: #cancel],
                start: [Function],
                [Symbol(#tag)]: 2705664584752,
                type: "bytes",
                autoAllocateChunkSize: 211
              },
              [Symbol(pullAgain)]: false,
              [Symbol(pulling)]: false,
              [Symbol(pendingPullIntos)]: {
                [Symbol(PolyProto)]: {
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                _head: 0,
                _tail: 1,
                _capacityMask: 3,
                _list: [
                  {
                    buffer: ArrayBuffer(211) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                    byteOffset: 0,
                    byteLength: 211,
                    bytesFilled: 0,
                    elementSize: 1,
                    ctor: [class Uint8Array],
                    readerType: "default"
                  }, undefined, undefined, undefined
                ],
                size: [Function: size],
                isEmpty: [Function: isEmpty],
                isNotEmpty: [Function: isNotEmpty],
                shift: [Function: shift],
                peek: [Function: peek],
                push: [Function: push],
                toArray: [Function: toArray],
                clear: [Function: clear],
                _growArray: [Function: _growArray],
                _shrinkArray: [Function: _shrinkArray]
              },
              [Symbol(queue)]: {
                content: {
                  [Symbol(PolyProto)]: {
                    size: [Function: size],
                    isEmpty: [Function: isEmpty],
                    isNotEmpty: [Function: isNotEmpty],
                    shift: [Function: shift],
                    peek: [Function: peek],
                    push: [Function: push],
                    toArray: [Function: toArray],
                    clear: [Function: clear],
                    _growArray: [Function: _growArray],
                    _shrinkArray: [Function: _shrinkArray]
                  },
                  _head: 0,
                  _tail: 0,
                  _capacityMask: 3,
                  _list: [ undefined, undefined, undefined, undefined ],
                  size: [Function: size],
                  isEmpty: [Function: isEmpty],
                  isNotEmpty: [Function: isNotEmpty],
                  shift: [Function: shift],
                  peek: [Function: peek],
                  push: [Function: push],
                  toArray: [Function: toArray],
                  clear: [Function: clear],
                  _growArray: [Function: _growArray],
                  _shrinkArray: [Function: _shrinkArray]
                },
                size: 0
              },
              [Symbol(started)]: 1,
              [Symbol(closeRequested)]: false,
              [Symbol(strategyHWM)]: 0,
              [Symbol(autoAllocateChunkSize)]: 211,
              [Symbol(cancel)]: [Function: readableByteStreamControllerCancel],
              [Symbol(pull)]: [Function: readableByteStreamControllerPull],
              [Symbol(byobRequest)]: ReadableStreamBYOBRequest {
                [Symbol(associatedReadableByteStreamController)]: [Circular],
                [Symbol(view)]: Uint8Array(211) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                view: [Getter],
                respond: [Function: respond],
                respondWithNewView: [Function: respondWithNewView]
              },
              byobRequest: [Getter],
              desiredSize: [Getter],
              enqueue: [Function: enqueue],
              close: [Function: close],
              error: [Function: error]
            },
            [Symbol(bunNativeType)]: 1,
            [Symbol(asyncContext)]: undefined,
            [Symbol(highWaterMark)]: undefined,
            [Symbol(underlyingSource)]: undefined,
            [Symbol(start)]: undefined,
            locked: [Getter],
            cancel: [Function: cancel],
            getReader: [Function: getReader],
            pipeTo: [Function: pipeTo],
            pipeThrough: [Function: pipeThrough],
            tee: [Function: tee],
            values: [Function: values],
            [Symbol(Symbol.asyncIterator)]: [Function: lazyAsyncIterator]
          }
        },
        url: "/extract-cleaner-data-timecard",
        [Symbol(#type)]: "response",
        [Symbol(#nodeReq)]: [Circular],
        req: [Circular],
        responseUrl: "http://localhost:3000/extract-cleaner-data-timecard",
        redirects: [],
        _construct: [Function: _construct],
        _read: [Function: _read],
        aborted: [Getter],
        connection: [Getter],
        statusCode: [Getter],
        statusMessage: [Getter],
        httpVersion: [Getter],
        rawTrailers: [Getter],
        httpVersionMajor: [Getter],
        httpVersionMinor: [Getter],
        trailers: [Getter],
        socket: [Getter],
        setTimeout: [Function: setTimeout],
        on: [Function],
        destroy: [Function: destroy2],
        _undestroy: [Function: undestroy],
        _destroy: [Function],
        undefined: [Function],
        push: [Function],
        unshift: [Function],
        isPaused: [Function],
        setEncoding: [Function],
        read: [Function],
        pipe: [Function],
        unpipe: [Function],
        addListener: [Function],
        removeListener: [Function],
        off: [Function],
        removeAllListeners: [Function],
        resume: [Function],
        pause: [Function],
        wrap: [Function],
        iterator: [Function],
        readable: [Getter],
        readableDidRead: [Getter],
        readableAborted: [Getter],
        readableHighWaterMark: [Getter],
        readableBuffer: [Getter],
        readableFlowing: [Getter],
        readableLength: [Getter],
        readableObjectMode: [Getter],
        readableEncoding: [Getter],
        errored: [Getter],
        closed: [Getter],
        destroyed: [Getter],
        readableEnded: [Getter],
        asIndexedPairs: [Function],
        drop: [Function],
        filter: [Function],
        flatMap: [Function],
        map: [Function],
        take: [Function],
        every: [Function],
        forEach: [Function],
        reduce: [Function],
        toArray: [Function],
        some: [Function],
        find: [Function],
        [Symbol(Symbol.asyncIterator)]: [Function],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      [Symbol(#upgradeOrConnect)]: false,
      [Symbol(#parser)]: null,
      [Symbol(#maxHeadersCount)]: null,
      [Symbol(#reusedSocket)]: false,
      [Symbol(#host)]: "localhost",
      [Symbol(#protocol)]: "http:",
      [Symbol(#method)]: "POST",
      [Symbol(#port)]: "3000",
      [Symbol(#useDefaultPort)]: false,
      [Symbol(#joinDuplicateHeaders)]: undefined,
      [Symbol(#maxHeaderSize)]: undefined,
      [Symbol(#agent)]: {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false,
        defaultPort: 80,
        protocol: "http:",
        options: {
          path: null,
          noDelay: true
        },
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: "lifo",
        maxTotalSockets: undefined,
        totalSocketCount: 0,
        [Symbol(#fakeSocket)]: undefined,
        createConnection: [Function: createConnection],
        getName: [Function: getName],
        addRequest: [Function: addRequest],
        createSocket: [Function: createSocket],
        removeSocket: [Function: removeSocket],
        keepSocketAlive: [Function: keepSocketAlive],
        reuseSocket: [Function: reuseSocket],
        destroy: [Function: destroy],
        setMaxListeners: [Function: setMaxListeners2],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once2],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount2],
        eventNames: [Function: eventNames]
      },
      [Symbol(#path)]: "/extract-cleaner-data-timecard",
      [Symbol(#socketPath)]: undefined,
      [Symbol(#bodyChunks)]: [
        Buffer(93) [ 123, 34, 99, 108, 101, 97, 110, 101, 114, 73, 100, 34, 58, 34, 48, 48, 51, 65, 88, 48, 48, 48, 48, 48, 51, 89, 104, 98, 114, 89, 65, 67, 34, 44, 34, 112, 101, 114, 105, 111, 100, 34, 58, 123, 34, 115, 116, 97, 114, 116, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 49, 45, 50, 48, 34, 44, 34, 101, 110, 100, 68, 97, 116, 101, 34, 58, 34, 50, 48, 50, 51, 45, 49, 50, 45, 49, 55, 34, 125, 125 ]
      ],
      [Symbol(#fetchRequest)]: null,
      [Symbol(#signal)]: null,
      [Symbol(#timeoutTimer)]: undefined,
      [Symbol(#options)]: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: "http:",
        path: "/extract-cleaner-data-timecard",
        method: "POST",
        headers: {
          Accept: "application/json, text/plain, */*",
          "Content-Type": "application/json",
          "User-Agent": "axios/1.6.2",
          "Content-Length": "93",
          "Accept-Encoding": "gzip, compress, deflate"
        },
        agents: {
          http: undefined,
          https: undefined
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function],
        beforeRedirects: {
          proxy: [Function: beforeRedirect]
        },
        hostname: "localhost",
        port: "3000",
        agent: undefined,
        nativeProtocols: {
          "http:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          },
          "https:": {
            Agent: [class Agent],
            Server: [class Server],
            METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH",
              "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND",
              "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND",
              "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
            STATUS_CODES: {
              "100": "Continue",
              "101": "Switching Protocols",
              "102": "Processing",
              "103": "Early Hints",
              "200": "OK",
              "201": "Created",
              "202": "Accepted",
              "203": "Non-Authoritative Information",
              "204": "No Content",
              "205": "Reset Content",
              "206": "Partial Content",
              "207": "Multi-Status",
              "208": "Already Reported",
              "226": "IM Used",
              "300": "Multiple Choices",
              "301": "Moved Permanently",
              "302": "Found",
              "303": "See Other",
              "304": "Not Modified",
              "305": "Use Proxy",
              "307": "Temporary Redirect",
              "308": "Permanent Redirect",
              "400": "Bad Request",
              "401": "Unauthorized",
              "402": "Payment Required",
              "403": "Forbidden",
              "404": "Not Found",
              "405": "Method Not Allowed",
              "406": "Not Acceptable",
              "407": "Proxy Authentication Required",
              "408": "Request Timeout",
              "409": "Conflict",
              "410": "Gone",
              "411": "Length Required",
              "412": "Precondition Failed",
              "413": "Payload Too Large",
              "414": "URI Too Long",
              "415": "Unsupported Media Type",
              "416": "Range Not Satisfiable",
              "417": "Expectation Failed",
              "418": "I'm a Teapot",
              "421": "Misdirected Request",
              "422": "Unprocessable Entity",
              "423": "Locked",
              "424": "Failed Dependency",
              "425": "Too Early",
              "426": "Upgrade Required",
              "428": "Precondition Required",
              "429": "Too Many Requests",
              "431": "Request Header Fields Too Large",
              "451": "Unavailable For Legal Reasons",
              "500": "Internal Server Error",
              "501": "Not Implemented",
              "502": "Bad Gateway",
              "503": "Service Unavailable",
              "504": "Gateway Timeout",
              "505": "HTTP Version Not Supported",
              "506": "Variant Also Negotiates",
              "507": "Insufficient Storage",
              "508": "Loop Detected",
              "509": "Bandwidth Limit Exceeded",
              "510": "Not Extended",
              "511": "Network Authentication Required"
            },
            createServer: [Function],
            ServerResponse: [class ServerResponse],
            IncomingMessage: [class IncomingMessage],
            request: [Function],
            get: [Function],
            maxHeaderSize: 16384,
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            globalAgent: {
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              defaultPort: 80,
              protocol: "http:",
              options: {
                path: null,
                noDelay: true
              },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: "lifo",
              maxTotalSockets: undefined,
              totalSocketCount: 0,
              [Symbol(#fakeSocket)]: undefined,
              createConnection: [Function: createConnection],
              getName: [Function: getName],
              addRequest: [Function: addRequest],
              createSocket: [Function: createSocket],
              removeSocket: [Function: removeSocket],
              keepSocketAlive: [Function: keepSocketAlive],
              reuseSocket: [Function: reuseSocket],
              destroy: [Function: destroy],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames]
            },
            ClientRequest: [class ClientRequest],
            OutgoingMessage: [class OutgoingMessage]
          }
        },
        pathname: "/extract-cleaner-data-timecard",
        host: "localhost"
      },
      [Symbol(#finished)]: true,
      _events: EventEmitter {
        addListener: [Function: addListener],
        on: [Function: on],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: off],
        removeAllListeners: [Function: removeAllListeners],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      _redirectable: EventEmitter {
        _writableState: {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: "utf8",
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: [],
          getBuffer: [Function: getBuffer],
          bufferedRequestCount: [Getter]
        },
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: "http:",
          path: "/extract-cleaner-data-timecard",
          method: "POST",
          headers: {
            Accept: "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.6.2",
            "Content-Length": "93",
            "Accept-Encoding": "gzip, compress, deflate"
          },
          agents: {
            http: undefined,
            https: undefined
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function],
          beforeRedirects: {
            proxy: [Function: beforeRedirect]
          },
          hostname: "localhost",
          port: "3000",
          agent: undefined,
          nativeProtocols: {
            "http:": {
              Agent: [class Agent],
              Server: [class Server],
              METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK",
                "M-SEARCH", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH",
                "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE",
                "TRACE", "UNBIND", "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
              STATUS_CODES: {
                "100": "Continue",
                "101": "Switching Protocols",
                "102": "Processing",
                "103": "Early Hints",
                "200": "OK",
                "201": "Created",
                "202": "Accepted",
                "203": "Non-Authoritative Information",
                "204": "No Content",
                "205": "Reset Content",
                "206": "Partial Content",
                "207": "Multi-Status",
                "208": "Already Reported",
                "226": "IM Used",
                "300": "Multiple Choices",
                "301": "Moved Permanently",
                "302": "Found",
                "303": "See Other",
                "304": "Not Modified",
                "305": "Use Proxy",
                "307": "Temporary Redirect",
                "308": "Permanent Redirect",
                "400": "Bad Request",
                "401": "Unauthorized",
                "402": "Payment Required",
                "403": "Forbidden",
                "404": "Not Found",
                "405": "Method Not Allowed",
                "406": "Not Acceptable",
                "407": "Proxy Authentication Required",
                "408": "Request Timeout",
                "409": "Conflict",
                "410": "Gone",
                "411": "Length Required",
                "412": "Precondition Failed",
                "413": "Payload Too Large",
                "414": "URI Too Long",
                "415": "Unsupported Media Type",
                "416": "Range Not Satisfiable",
                "417": "Expectation Failed",
                "418": "I'm a Teapot",
                "421": "Misdirected Request",
                "422": "Unprocessable Entity",
                "423": "Locked",
                "424": "Failed Dependency",
                "425": "Too Early",
                "426": "Upgrade Required",
                "428": "Precondition Required",
                "429": "Too Many Requests",
                "431": "Request Header Fields Too Large",
                "451": "Unavailable For Legal Reasons",
                "500": "Internal Server Error",
                "501": "Not Implemented",
                "502": "Bad Gateway",
                "503": "Service Unavailable",
                "504": "Gateway Timeout",
                "505": "HTTP Version Not Supported",
                "506": "Variant Also Negotiates",
                "507": "Insufficient Storage",
                "508": "Loop Detected",
                "509": "Bandwidth Limit Exceeded",
                "510": "Not Extended",
                "511": "Network Authentication Required"
              },
              createServer: [Function],
              ServerResponse: [class ServerResponse],
              IncomingMessage: [class IncomingMessage],
              request: [Function],
              get: [Function],
              maxHeaderSize: 16384,
              validateHeaderName: [Function],
              validateHeaderValue: [Function],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              globalAgent: {
                _events: {},
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                defaultPort: 80,
                protocol: "http:",
                options: {
                  path: null,
                  noDelay: true
                },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: "lifo",
                maxTotalSockets: undefined,
                totalSocketCount: 0,
                [Symbol(#fakeSocket)]: undefined,
                createConnection: [Function: createConnection],
                getName: [Function: getName],
                addRequest: [Function: addRequest],
                createSocket: [Function: createSocket],
                removeSocket: [Function: removeSocket],
                keepSocketAlive: [Function: keepSocketAlive],
                reuseSocket: [Function: reuseSocket],
                destroy: [Function: destroy],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames]
              },
              ClientRequest: [class ClientRequest],
              OutgoingMessage: [class OutgoingMessage]
            },
            "https:": {
              Agent: [class Agent],
              Server: [class Server],
              METHODS: [ "ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK",
                "M-SEARCH", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH",
                "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE",
                "TRACE", "UNBIND", "UNLINK", "UNLOCK", "UNSUBSCRIBE" ],
              STATUS_CODES: {
                "100": "Continue",
                "101": "Switching Protocols",
                "102": "Processing",
                "103": "Early Hints",
                "200": "OK",
                "201": "Created",
                "202": "Accepted",
                "203": "Non-Authoritative Information",
                "204": "No Content",
                "205": "Reset Content",
                "206": "Partial Content",
                "207": "Multi-Status",
                "208": "Already Reported",
                "226": "IM Used",
                "300": "Multiple Choices",
                "301": "Moved Permanently",
                "302": "Found",
                "303": "See Other",
                "304": "Not Modified",
                "305": "Use Proxy",
                "307": "Temporary Redirect",
                "308": "Permanent Redirect",
                "400": "Bad Request",
                "401": "Unauthorized",
                "402": "Payment Required",
                "403": "Forbidden",
                "404": "Not Found",
                "405": "Method Not Allowed",
                "406": "Not Acceptable",
                "407": "Proxy Authentication Required",
                "408": "Request Timeout",
                "409": "Conflict",
                "410": "Gone",
                "411": "Length Required",
                "412": "Precondition Failed",
                "413": "Payload Too Large",
                "414": "URI Too Long",
                "415": "Unsupported Media Type",
                "416": "Range Not Satisfiable",
                "417": "Expectation Failed",
                "418": "I'm a Teapot",
                "421": "Misdirected Request",
                "422": "Unprocessable Entity",
                "423": "Locked",
                "424": "Failed Dependency",
                "425": "Too Early",
                "426": "Upgrade Required",
                "428": "Precondition Required",
                "429": "Too Many Requests",
                "431": "Request Header Fields Too Large",
                "451": "Unavailable For Legal Reasons",
                "500": "Internal Server Error",
                "501": "Not Implemented",
                "502": "Bad Gateway",
                "503": "Service Unavailable",
                "504": "Gateway Timeout",
                "505": "HTTP Version Not Supported",
                "506": "Variant Also Negotiates",
                "507": "Insufficient Storage",
                "508": "Loop Detected",
                "509": "Bandwidth Limit Exceeded",
                "510": "Not Extended",
                "511": "Network Authentication Required"
              },
              createServer: [Function],
              ServerResponse: [class ServerResponse],
              IncomingMessage: [class IncomingMessage],
              request: [Function],
              get: [Function],
              maxHeaderSize: 16384,
              validateHeaderName: [Function],
              validateHeaderValue: [Function],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              globalAgent: {
                _events: {},
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                defaultPort: 80,
                protocol: "http:",
                options: {
                  path: null,
                  noDelay: true
                },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: "lifo",
                maxTotalSockets: undefined,
                totalSocketCount: 0,
                [Symbol(#fakeSocket)]: undefined,
                createConnection: [Function: createConnection],
                getName: [Function: getName],
                addRequest: [Function: addRequest],
                createSocket: [Function: createSocket],
                removeSocket: [Function: removeSocket],
                keepSocketAlive: [Function: keepSocketAlive],
                reuseSocket: [Function: reuseSocket],
                destroy: [Function: destroy],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames]
              },
              ClientRequest: [class ClientRequest],
              OutgoingMessage: [class OutgoingMessage]
            }
          },
          pathname: "/extract-cleaner-data-timecard"
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 93,
        _requestBodyBuffers: [],
        _events: EventEmitter {
          addListener: [Function: addListener],
          on: [Function: on],
          once: [Function: once],
          prependListener: [Function: prependListener],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: off],
          removeAllListeners: [Function: removeAllListeners],
          emit: [Function: emit],
          eventNames: [Function: eventNames],
          listenerCount: [Function: listenerCount],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners]
        },
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: "http://localhost:3000/extract-cleaner-data-timecard",
        abort: [Function],
        destroy: [Function],
        write: [Function],
        end: [Function],
        setHeader: [Function],
        removeHeader: [Function],
        setTimeout: [Function],
        flushHeaders: [Function],
        getHeader: [Function],
        setNoDelay: [Function],
        setSocketKeepAlive: [Function],
        aborted: [Getter],
        connection: [Getter],
        socket: [Getter],
        _sanitizeOptions: [Function],
        _performRequest: [Function],
        _processResponse: [Function],
        pipe: [Function],
        cork: [Function],
        uncork: [Function],
        setDefaultEncoding: [Function: setDefaultEncoding],
        _write: [Function],
        _writev: null,
        closed: [Getter],
        destroyed: [Getter],
        writable: [Getter],
        writableFinished: [Getter],
        writableObjectMode: [Getter],
        writableBuffer: [Getter],
        writableEnded: [Getter],
        writableNeedDrain: [Getter],
        writableHighWaterMark: [Getter],
        writableCorked: [Getter],
        writableLength: [Getter],
        errored: [Getter],
        writableAborted: [Getter],
        _undestroy: [Function: undestroy],
        _destroy: [Function],
        undefined: [Function],
        addListener: [Function: addListener],
        on: [Function: on],
        once: [Function: once],
        prependListener: [Function: prependListener],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: off],
        removeAllListeners: [Function: removeAllListeners],
        emit: [Function: emit],
        eventNames: [Function: eventNames],
        listenerCount: [Function: listenerCount],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners]
      },
      path: [Getter],
      port: [Getter],
      method: [Getter],
      host: [Getter],
      protocol: [Getter],
      _write: [Function: _write],
      _writev: [Function: _writev],
      _final: [Function: _final],
      aborted: [Getter],
      abort: [Function: abort],
      setSocketKeepAlive: [Function: setSocketKeepAlive],
      setNoDelay: [Function: setNoDelay],
      setTimeout: [Function: setTimeout],
      [Symbol(kClearTimeout)]: [Function],
      _implicitHeader: [Function: _implicitHeader],
      headers: [Getter],
      shouldKeepAlive: [Getter],
      chunkedEncoding: [Getter],
      useChunkedEncodingByDefault: [Getter],
      socket: [Getter],
      connection: [Getter],
      finished: [Getter],
      appendHeader: [Function: appendHeader],
      flushHeaders: [Function: flushHeaders],
      getHeader: [Function: getHeader],
      getHeaders: [Function: getHeaders],
      getHeaderNames: [Function: getHeaderNames],
      removeHeader: [Function: removeHeader],
      setHeader: [Function: setHeader],
      hasHeader: [Function: hasHeader],
      addTrailers: [Function: addTrailers],
      pipe: [Function],
      write: [Function],
      cork: [Function],
      uncork: [Function],
      setDefaultEncoding: [Function: setDefaultEncoding],
      end: [Function],
      closed: [Getter],
      destroyed: [Getter],
      writable: [Getter],
      writableFinished: [Getter],
      writableObjectMode: [Getter],
      writableBuffer: [Getter],
      writableEnded: [Getter],
      writableNeedDrain: [Getter],
      writableHighWaterMark: [Getter],
      writableCorked: [Getter],
      writableLength: [Getter],
      errored: [Getter],
      writableAborted: [Getter],
      destroy: [Function],
      _undestroy: [Function: undestroy],
      _destroy: [Function],
      undefined: [Function]
    },
    data: {
      error: "An error occurredError while extracting data for cleaner: required property \"period\"\n└─ cannot decode \"Error in parsing leave closed period\", should be End date is equal or before start date"
    }
  },
  toJSON: [Function: toJSON],
  isAxiosError: true,
  toString: [Function: toString]
}
Nasiga KONE OK 179/370 (error : 5)
Rosalina MIRANDA SOARES FERNANDES OK 180/370 (error : 5)
Ahmed LAGRINI OK 181/370 (error : 5)
Hademou CAMARA OK 182/370 (error : 5)
Abdoulaye COULIBALY error :
Facourou DIAKHITE OK 183/370 (error : 6)
Maria-Jesus SOARES CABRAL OK 184/370 (error : 6)
Mirlande DAY OK 185/370 (error : 6)
Samba Toure OK 186/370 (error : 6)
Kiruparany NAGESWARAN OK 187/370 (error : 6)
Boubacar CAMARA error :
Monica Daniela SILVA TAVARES OK 188/370 (error : 7)
Madikoumba TRAORE OK 189/370 (error : 7)
Tiguidanke DIABY OK 190/370 (error : 7)
Youcef MEBTOUCHE OK 191/370 (error : 7)
Aly BARRY OK 192/370 (error : 7)
Adny JEAN BAPTISTE OK 193/370 (error : 7)
Fatimata SIDIBE OK 194/370 (error : 7)
Mohamed REJILI OK 195/370 (error : 7)
Makiadi LUNTADILA OK 196/370 (error : 7)
Vanio jorge LOPES RAFAEL OK 197/370 (error : 7)
Jannette ARBIS OK 198/370 (error : 7)
Vanesse VINCENT OK 199/370 (error : 7)
Jérusalem BOLILA OK 200/370 (error : 7)
Mamadou BAH OK 201/370 (error : 7)
Aidara VIEUX OK 202/370 (error : 7)
Svetlana MAKARENKO OK 203/370 (error : 7)
Aldja BELLIL OK 204/370 (error : 7)
Joana DA VEIGA VARELA OK 205/370 (error : 7)
Niangri KEITA OK 206/370 (error : 7)
Julia LOPES DA SILVA OK 207/370 (error : 7)
Moussa CAMARA (871) OK 208/370 (error : 7)
Mamadou Djita DIARRA OK 209/370 (error : 7)
Khadija BA OK 210/370 (error : 7)
Ibrahime Saware OK 211/370 (error : 7)
Ismaila DIABY OK 212/370 (error : 7)
Khresanchand KHURTOO OK 213/370 (error : 7)
Nissaf M'Barik OK 214/370 (error : 7)
Franck SEMI BI OK 215/370 (error : 7)
Arsène-Junior Gnaki OK 216/370 (error : 7)
Boubacar CAMARA error :
Hamara CAMARA OK 217/370 (error : 8)
Mariana MOISEI OK 218/370 (error : 8)
Saida AISSOU OK 219/370 (error : 8)
Maimouna CAMARA OK 220/370 (error : 8)
Anastasie FATAL OK 221/370 (error : 8)
Sidi KEITA error :
Kadiatou DIALLO (952) OK 222/370 (error : 9)
Fatoumata JADAMA OK 223/370 (error : 9)
Mahamet Camara OK 224/370 (error : 9)
Christelle GUIBERT OK 225/370 (error : 9)
Bidane Bathily OK 226/370 (error : 9)
Fatoumata KY OK 227/370 (error : 9)
Adam DEMBA OK 228/370 (error : 9)
Soumaila DRAME OK 229/370 (error : 9)
Iraci CHAVES OK 230/370 (error : 9)
Franckly Georges OK 231/370 (error : 9)
Livia BARROS error :
Badembo CEESAY OK 232/370 (error : 10)
Isabel MENDES SEMEDO LOPES OK 233/370 (error : 10)
Malle TAMBADOU OK 234/370 (error : 10)
Yamna ATANAM error :
Sadioba Diaby OK 235/370 (error : 11)
Karima EZZIDI OK 236/370 (error : 11)
Ilias ERROUANE OK 237/370 (error : 11)
Adnane Laribi error :
Habsatou FODIE OK 238/370 (error : 12)
Eleanor BENARES OK 239/370 (error : 12)
Dongui Theophile Damas BEKOUIN OK 240/370 (error : 12)
Hassen JEMAI OK 241/370 (error : 12)
Kiodi MANSIMA LESA OK 242/370 (error : 12)
Abi TRAORE OK 243/370 (error : 12)
Aly BIDANESSY error :
Rosalie MONTEIRO OK 244/370 (error : 13)
William Noumi OK 245/370 (error : 13)
Marianne ANGESE MANGENGE OK 246/370 (error : 13)
Jocelyne LALANNE OK 247/370 (error : 13)
Fily CAMARA OK 248/370 (error : 13)
Patricia TAVARES FURTADO OK 249/370 (error : 13)
Edouine PROSPER OK 250/370 (error : 13)

